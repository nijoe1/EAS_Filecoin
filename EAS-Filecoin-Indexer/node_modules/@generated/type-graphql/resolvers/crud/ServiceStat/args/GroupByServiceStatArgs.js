"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupByServiceStatArgs = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const ServiceStatOrderByWithAggregationInput_1 = require("../../../inputs/ServiceStatOrderByWithAggregationInput");
const ServiceStatScalarWhereWithAggregatesInput_1 = require("../../../inputs/ServiceStatScalarWhereWithAggregatesInput");
const ServiceStatWhereInput_1 = require("../../../inputs/ServiceStatWhereInput");
const ServiceStatScalarFieldEnum_1 = require("../../../../enums/ServiceStatScalarFieldEnum");
let GroupByServiceStatArgs = class GroupByServiceStatArgs {
};
tslib_1.__decorate([
    TypeGraphQL.Field(_type => ServiceStatWhereInput_1.ServiceStatWhereInput, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", ServiceStatWhereInput_1.ServiceStatWhereInput)
], GroupByServiceStatArgs.prototype, "where", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => [ServiceStatOrderByWithAggregationInput_1.ServiceStatOrderByWithAggregationInput], {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Array)
], GroupByServiceStatArgs.prototype, "orderBy", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => [ServiceStatScalarFieldEnum_1.ServiceStatScalarFieldEnum], {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Array)
], GroupByServiceStatArgs.prototype, "by", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => ServiceStatScalarWhereWithAggregatesInput_1.ServiceStatScalarWhereWithAggregatesInput, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", ServiceStatScalarWhereWithAggregatesInput_1.ServiceStatScalarWhereWithAggregatesInput)
], GroupByServiceStatArgs.prototype, "having", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Number)
], GroupByServiceStatArgs.prototype, "take", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Number)
], GroupByServiceStatArgs.prototype, "skip", void 0);
GroupByServiceStatArgs = tslib_1.__decorate([
    TypeGraphQL.ArgsType()
], GroupByServiceStatArgs);
exports.GroupByServiceStatArgs = GroupByServiceStatArgs;
