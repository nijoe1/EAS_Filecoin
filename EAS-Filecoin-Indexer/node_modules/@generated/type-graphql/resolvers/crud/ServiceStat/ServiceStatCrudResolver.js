"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceStatCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateServiceStatArgs_1 = require("./args/AggregateServiceStatArgs");
const CreateManyServiceStatArgs_1 = require("./args/CreateManyServiceStatArgs");
const CreateOneServiceStatArgs_1 = require("./args/CreateOneServiceStatArgs");
const DeleteManyServiceStatArgs_1 = require("./args/DeleteManyServiceStatArgs");
const DeleteOneServiceStatArgs_1 = require("./args/DeleteOneServiceStatArgs");
const FindFirstServiceStatArgs_1 = require("./args/FindFirstServiceStatArgs");
const FindFirstServiceStatOrThrowArgs_1 = require("./args/FindFirstServiceStatOrThrowArgs");
const FindManyServiceStatArgs_1 = require("./args/FindManyServiceStatArgs");
const FindUniqueServiceStatArgs_1 = require("./args/FindUniqueServiceStatArgs");
const FindUniqueServiceStatOrThrowArgs_1 = require("./args/FindUniqueServiceStatOrThrowArgs");
const GroupByServiceStatArgs_1 = require("./args/GroupByServiceStatArgs");
const UpdateManyServiceStatArgs_1 = require("./args/UpdateManyServiceStatArgs");
const UpdateOneServiceStatArgs_1 = require("./args/UpdateOneServiceStatArgs");
const UpsertOneServiceStatArgs_1 = require("./args/UpsertOneServiceStatArgs");
const helpers_1 = require("../../../helpers");
const ServiceStat_1 = require("../../../models/ServiceStat");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateServiceStat_1 = require("../../outputs/AggregateServiceStat");
const ServiceStatGroupBy_1 = require("../../outputs/ServiceStatGroupBy");
let ServiceStatCrudResolver = class ServiceStatCrudResolver {
    async aggregateServiceStat(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
    async createManyServiceStat(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneServiceStat(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyServiceStat(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneServiceStat(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstServiceStat(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstServiceStatOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async serviceStats(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async serviceStat(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async getServiceStat(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupByServiceStat(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManyServiceStat(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneServiceStat(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneServiceStat(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateServiceStat_1.AggregateServiceStat, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateServiceStatArgs_1.AggregateServiceStatArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "aggregateServiceStat", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyServiceStatArgs_1.CreateManyServiceStatArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "createManyServiceStat", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => ServiceStat_1.ServiceStat, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneServiceStatArgs_1.CreateOneServiceStatArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "createOneServiceStat", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyServiceStatArgs_1.DeleteManyServiceStatArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "deleteManyServiceStat", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => ServiceStat_1.ServiceStat, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneServiceStatArgs_1.DeleteOneServiceStatArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "deleteOneServiceStat", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => ServiceStat_1.ServiceStat, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstServiceStatArgs_1.FindFirstServiceStatArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "findFirstServiceStat", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => ServiceStat_1.ServiceStat, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstServiceStatOrThrowArgs_1.FindFirstServiceStatOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "findFirstServiceStatOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [ServiceStat_1.ServiceStat], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyServiceStatArgs_1.FindManyServiceStatArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "serviceStats", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => ServiceStat_1.ServiceStat, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueServiceStatArgs_1.FindUniqueServiceStatArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "serviceStat", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => ServiceStat_1.ServiceStat, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueServiceStatOrThrowArgs_1.FindUniqueServiceStatOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "getServiceStat", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [ServiceStatGroupBy_1.ServiceStatGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByServiceStatArgs_1.GroupByServiceStatArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "groupByServiceStat", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyServiceStatArgs_1.UpdateManyServiceStatArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "updateManyServiceStat", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => ServiceStat_1.ServiceStat, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneServiceStatArgs_1.UpdateOneServiceStatArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "updateOneServiceStat", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => ServiceStat_1.ServiceStat, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneServiceStatArgs_1.UpsertOneServiceStatArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ServiceStatCrudResolver.prototype, "upsertOneServiceStat", null);
ServiceStatCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => ServiceStat_1.ServiceStat)
], ServiceStatCrudResolver);
exports.ServiceStatCrudResolver = ServiceStatCrudResolver;
