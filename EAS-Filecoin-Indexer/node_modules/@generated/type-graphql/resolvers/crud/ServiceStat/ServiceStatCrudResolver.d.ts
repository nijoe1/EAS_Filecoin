import type { GraphQLResolveInfo } from "graphql";
import { AggregateServiceStatArgs } from "./args/AggregateServiceStatArgs";
import { CreateManyServiceStatArgs } from "./args/CreateManyServiceStatArgs";
import { CreateOneServiceStatArgs } from "./args/CreateOneServiceStatArgs";
import { DeleteManyServiceStatArgs } from "./args/DeleteManyServiceStatArgs";
import { DeleteOneServiceStatArgs } from "./args/DeleteOneServiceStatArgs";
import { FindFirstServiceStatArgs } from "./args/FindFirstServiceStatArgs";
import { FindFirstServiceStatOrThrowArgs } from "./args/FindFirstServiceStatOrThrowArgs";
import { FindManyServiceStatArgs } from "./args/FindManyServiceStatArgs";
import { FindUniqueServiceStatArgs } from "./args/FindUniqueServiceStatArgs";
import { FindUniqueServiceStatOrThrowArgs } from "./args/FindUniqueServiceStatOrThrowArgs";
import { GroupByServiceStatArgs } from "./args/GroupByServiceStatArgs";
import { UpdateManyServiceStatArgs } from "./args/UpdateManyServiceStatArgs";
import { UpdateOneServiceStatArgs } from "./args/UpdateOneServiceStatArgs";
import { UpsertOneServiceStatArgs } from "./args/UpsertOneServiceStatArgs";
import { ServiceStat } from "../../../models/ServiceStat";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateServiceStat } from "../../outputs/AggregateServiceStat";
import { ServiceStatGroupBy } from "../../outputs/ServiceStatGroupBy";
export declare class ServiceStatCrudResolver {
    aggregateServiceStat(ctx: any, info: GraphQLResolveInfo, args: AggregateServiceStatArgs): Promise<AggregateServiceStat>;
    createManyServiceStat(ctx: any, info: GraphQLResolveInfo, args: CreateManyServiceStatArgs): Promise<AffectedRowsOutput>;
    createOneServiceStat(ctx: any, info: GraphQLResolveInfo, args: CreateOneServiceStatArgs): Promise<ServiceStat>;
    deleteManyServiceStat(ctx: any, info: GraphQLResolveInfo, args: DeleteManyServiceStatArgs): Promise<AffectedRowsOutput>;
    deleteOneServiceStat(ctx: any, info: GraphQLResolveInfo, args: DeleteOneServiceStatArgs): Promise<ServiceStat | null>;
    findFirstServiceStat(ctx: any, info: GraphQLResolveInfo, args: FindFirstServiceStatArgs): Promise<ServiceStat | null>;
    findFirstServiceStatOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstServiceStatOrThrowArgs): Promise<ServiceStat | null>;
    serviceStats(ctx: any, info: GraphQLResolveInfo, args: FindManyServiceStatArgs): Promise<ServiceStat[]>;
    serviceStat(ctx: any, info: GraphQLResolveInfo, args: FindUniqueServiceStatArgs): Promise<ServiceStat | null>;
    getServiceStat(ctx: any, info: GraphQLResolveInfo, args: FindUniqueServiceStatOrThrowArgs): Promise<ServiceStat | null>;
    groupByServiceStat(ctx: any, info: GraphQLResolveInfo, args: GroupByServiceStatArgs): Promise<ServiceStatGroupBy[]>;
    updateManyServiceStat(ctx: any, info: GraphQLResolveInfo, args: UpdateManyServiceStatArgs): Promise<AffectedRowsOutput>;
    updateOneServiceStat(ctx: any, info: GraphQLResolveInfo, args: UpdateOneServiceStatArgs): Promise<ServiceStat | null>;
    upsertOneServiceStat(ctx: any, info: GraphQLResolveInfo, args: UpsertOneServiceStatArgs): Promise<ServiceStat>;
}
