"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregateServiceStatResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateServiceStatArgs_1 = require("./args/AggregateServiceStatArgs");
const ServiceStat_1 = require("../../../models/ServiceStat");
const AggregateServiceStat_1 = require("../../outputs/AggregateServiceStat");
const helpers_1 = require("../../../helpers");
let AggregateServiceStatResolver = class AggregateServiceStatResolver {
    async aggregateServiceStat(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).serviceStat.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
};
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateServiceStat_1.AggregateServiceStat, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateServiceStatArgs_1.AggregateServiceStatArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AggregateServiceStatResolver.prototype, "aggregateServiceStat", null);
AggregateServiceStatResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => ServiceStat_1.ServiceStat)
], AggregateServiceStatResolver);
exports.AggregateServiceStatResolver = AggregateServiceStatResolver;
