"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupBySchemaNameArgs = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const SchemaNameOrderByWithAggregationInput_1 = require("../../../inputs/SchemaNameOrderByWithAggregationInput");
const SchemaNameScalarWhereWithAggregatesInput_1 = require("../../../inputs/SchemaNameScalarWhereWithAggregatesInput");
const SchemaNameWhereInput_1 = require("../../../inputs/SchemaNameWhereInput");
const SchemaNameScalarFieldEnum_1 = require("../../../../enums/SchemaNameScalarFieldEnum");
let GroupBySchemaNameArgs = class GroupBySchemaNameArgs {
};
tslib_1.__decorate([
    TypeGraphQL.Field(_type => SchemaNameWhereInput_1.SchemaNameWhereInput, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", SchemaNameWhereInput_1.SchemaNameWhereInput)
], GroupBySchemaNameArgs.prototype, "where", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => [SchemaNameOrderByWithAggregationInput_1.SchemaNameOrderByWithAggregationInput], {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Array)
], GroupBySchemaNameArgs.prototype, "orderBy", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => [SchemaNameScalarFieldEnum_1.SchemaNameScalarFieldEnum], {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Array)
], GroupBySchemaNameArgs.prototype, "by", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => SchemaNameScalarWhereWithAggregatesInput_1.SchemaNameScalarWhereWithAggregatesInput, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", SchemaNameScalarWhereWithAggregatesInput_1.SchemaNameScalarWhereWithAggregatesInput)
], GroupBySchemaNameArgs.prototype, "having", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Number)
], GroupBySchemaNameArgs.prototype, "take", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Number)
], GroupBySchemaNameArgs.prototype, "skip", void 0);
GroupBySchemaNameArgs = tslib_1.__decorate([
    TypeGraphQL.ArgsType()
], GroupBySchemaNameArgs);
exports.GroupBySchemaNameArgs = GroupBySchemaNameArgs;
