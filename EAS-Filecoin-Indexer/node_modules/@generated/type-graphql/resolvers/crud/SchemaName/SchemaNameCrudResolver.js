"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaNameCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateSchemaNameArgs_1 = require("./args/AggregateSchemaNameArgs");
const CreateManySchemaNameArgs_1 = require("./args/CreateManySchemaNameArgs");
const CreateOneSchemaNameArgs_1 = require("./args/CreateOneSchemaNameArgs");
const DeleteManySchemaNameArgs_1 = require("./args/DeleteManySchemaNameArgs");
const DeleteOneSchemaNameArgs_1 = require("./args/DeleteOneSchemaNameArgs");
const FindFirstSchemaNameArgs_1 = require("./args/FindFirstSchemaNameArgs");
const FindFirstSchemaNameOrThrowArgs_1 = require("./args/FindFirstSchemaNameOrThrowArgs");
const FindManySchemaNameArgs_1 = require("./args/FindManySchemaNameArgs");
const FindUniqueSchemaNameArgs_1 = require("./args/FindUniqueSchemaNameArgs");
const FindUniqueSchemaNameOrThrowArgs_1 = require("./args/FindUniqueSchemaNameOrThrowArgs");
const GroupBySchemaNameArgs_1 = require("./args/GroupBySchemaNameArgs");
const UpdateManySchemaNameArgs_1 = require("./args/UpdateManySchemaNameArgs");
const UpdateOneSchemaNameArgs_1 = require("./args/UpdateOneSchemaNameArgs");
const UpsertOneSchemaNameArgs_1 = require("./args/UpsertOneSchemaNameArgs");
const helpers_1 = require("../../../helpers");
const SchemaName_1 = require("../../../models/SchemaName");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateSchemaName_1 = require("../../outputs/AggregateSchemaName");
const SchemaNameGroupBy_1 = require("../../outputs/SchemaNameGroupBy");
let SchemaNameCrudResolver = class SchemaNameCrudResolver {
    async aggregateSchemaName(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
    async createManySchemaName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneSchemaName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManySchemaName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneSchemaName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstSchemaName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstSchemaNameOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async schemaNames(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async schemaName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async getSchemaName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupBySchemaName(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManySchemaName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneSchemaName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneSchemaName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schemaName.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateSchemaName_1.AggregateSchemaName, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateSchemaNameArgs_1.AggregateSchemaNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "aggregateSchemaName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManySchemaNameArgs_1.CreateManySchemaNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "createManySchemaName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => SchemaName_1.SchemaName, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneSchemaNameArgs_1.CreateOneSchemaNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "createOneSchemaName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManySchemaNameArgs_1.DeleteManySchemaNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "deleteManySchemaName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => SchemaName_1.SchemaName, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneSchemaNameArgs_1.DeleteOneSchemaNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "deleteOneSchemaName", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => SchemaName_1.SchemaName, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstSchemaNameArgs_1.FindFirstSchemaNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "findFirstSchemaName", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => SchemaName_1.SchemaName, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstSchemaNameOrThrowArgs_1.FindFirstSchemaNameOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "findFirstSchemaNameOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [SchemaName_1.SchemaName], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManySchemaNameArgs_1.FindManySchemaNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "schemaNames", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => SchemaName_1.SchemaName, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueSchemaNameArgs_1.FindUniqueSchemaNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "schemaName", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => SchemaName_1.SchemaName, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueSchemaNameOrThrowArgs_1.FindUniqueSchemaNameOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "getSchemaName", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [SchemaNameGroupBy_1.SchemaNameGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupBySchemaNameArgs_1.GroupBySchemaNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "groupBySchemaName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManySchemaNameArgs_1.UpdateManySchemaNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "updateManySchemaName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => SchemaName_1.SchemaName, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneSchemaNameArgs_1.UpdateOneSchemaNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "updateOneSchemaName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => SchemaName_1.SchemaName, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneSchemaNameArgs_1.UpsertOneSchemaNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], SchemaNameCrudResolver.prototype, "upsertOneSchemaName", null);
SchemaNameCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => SchemaName_1.SchemaName)
], SchemaNameCrudResolver);
exports.SchemaNameCrudResolver = SchemaNameCrudResolver;
