import type { GraphQLResolveInfo } from "graphql";
import { AggregateSchemaNameArgs } from "./args/AggregateSchemaNameArgs";
import { CreateManySchemaNameArgs } from "./args/CreateManySchemaNameArgs";
import { CreateOneSchemaNameArgs } from "./args/CreateOneSchemaNameArgs";
import { DeleteManySchemaNameArgs } from "./args/DeleteManySchemaNameArgs";
import { DeleteOneSchemaNameArgs } from "./args/DeleteOneSchemaNameArgs";
import { FindFirstSchemaNameArgs } from "./args/FindFirstSchemaNameArgs";
import { FindFirstSchemaNameOrThrowArgs } from "./args/FindFirstSchemaNameOrThrowArgs";
import { FindManySchemaNameArgs } from "./args/FindManySchemaNameArgs";
import { FindUniqueSchemaNameArgs } from "./args/FindUniqueSchemaNameArgs";
import { FindUniqueSchemaNameOrThrowArgs } from "./args/FindUniqueSchemaNameOrThrowArgs";
import { GroupBySchemaNameArgs } from "./args/GroupBySchemaNameArgs";
import { UpdateManySchemaNameArgs } from "./args/UpdateManySchemaNameArgs";
import { UpdateOneSchemaNameArgs } from "./args/UpdateOneSchemaNameArgs";
import { UpsertOneSchemaNameArgs } from "./args/UpsertOneSchemaNameArgs";
import { SchemaName } from "../../../models/SchemaName";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateSchemaName } from "../../outputs/AggregateSchemaName";
import { SchemaNameGroupBy } from "../../outputs/SchemaNameGroupBy";
export declare class SchemaNameCrudResolver {
    aggregateSchemaName(ctx: any, info: GraphQLResolveInfo, args: AggregateSchemaNameArgs): Promise<AggregateSchemaName>;
    createManySchemaName(ctx: any, info: GraphQLResolveInfo, args: CreateManySchemaNameArgs): Promise<AffectedRowsOutput>;
    createOneSchemaName(ctx: any, info: GraphQLResolveInfo, args: CreateOneSchemaNameArgs): Promise<SchemaName>;
    deleteManySchemaName(ctx: any, info: GraphQLResolveInfo, args: DeleteManySchemaNameArgs): Promise<AffectedRowsOutput>;
    deleteOneSchemaName(ctx: any, info: GraphQLResolveInfo, args: DeleteOneSchemaNameArgs): Promise<SchemaName | null>;
    findFirstSchemaName(ctx: any, info: GraphQLResolveInfo, args: FindFirstSchemaNameArgs): Promise<SchemaName | null>;
    findFirstSchemaNameOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstSchemaNameOrThrowArgs): Promise<SchemaName | null>;
    schemaNames(ctx: any, info: GraphQLResolveInfo, args: FindManySchemaNameArgs): Promise<SchemaName[]>;
    schemaName(ctx: any, info: GraphQLResolveInfo, args: FindUniqueSchemaNameArgs): Promise<SchemaName | null>;
    getSchemaName(ctx: any, info: GraphQLResolveInfo, args: FindUniqueSchemaNameOrThrowArgs): Promise<SchemaName | null>;
    groupBySchemaName(ctx: any, info: GraphQLResolveInfo, args: GroupBySchemaNameArgs): Promise<SchemaNameGroupBy[]>;
    updateManySchemaName(ctx: any, info: GraphQLResolveInfo, args: UpdateManySchemaNameArgs): Promise<AffectedRowsOutput>;
    updateOneSchemaName(ctx: any, info: GraphQLResolveInfo, args: UpdateOneSchemaNameArgs): Promise<SchemaName | null>;
    upsertOneSchemaName(ctx: any, info: GraphQLResolveInfo, args: UpsertOneSchemaNameArgs): Promise<SchemaName>;
}
