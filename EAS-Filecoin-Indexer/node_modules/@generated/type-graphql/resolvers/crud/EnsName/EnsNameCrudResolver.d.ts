import type { GraphQLResolveInfo } from "graphql";
import { AggregateEnsNameArgs } from "./args/AggregateEnsNameArgs";
import { CreateManyEnsNameArgs } from "./args/CreateManyEnsNameArgs";
import { CreateOneEnsNameArgs } from "./args/CreateOneEnsNameArgs";
import { DeleteManyEnsNameArgs } from "./args/DeleteManyEnsNameArgs";
import { DeleteOneEnsNameArgs } from "./args/DeleteOneEnsNameArgs";
import { FindFirstEnsNameArgs } from "./args/FindFirstEnsNameArgs";
import { FindFirstEnsNameOrThrowArgs } from "./args/FindFirstEnsNameOrThrowArgs";
import { FindManyEnsNameArgs } from "./args/FindManyEnsNameArgs";
import { FindUniqueEnsNameArgs } from "./args/FindUniqueEnsNameArgs";
import { FindUniqueEnsNameOrThrowArgs } from "./args/FindUniqueEnsNameOrThrowArgs";
import { GroupByEnsNameArgs } from "./args/GroupByEnsNameArgs";
import { UpdateManyEnsNameArgs } from "./args/UpdateManyEnsNameArgs";
import { UpdateOneEnsNameArgs } from "./args/UpdateOneEnsNameArgs";
import { UpsertOneEnsNameArgs } from "./args/UpsertOneEnsNameArgs";
import { EnsName } from "../../../models/EnsName";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateEnsName } from "../../outputs/AggregateEnsName";
import { EnsNameGroupBy } from "../../outputs/EnsNameGroupBy";
export declare class EnsNameCrudResolver {
    aggregateEnsName(ctx: any, info: GraphQLResolveInfo, args: AggregateEnsNameArgs): Promise<AggregateEnsName>;
    createManyEnsName(ctx: any, info: GraphQLResolveInfo, args: CreateManyEnsNameArgs): Promise<AffectedRowsOutput>;
    createOneEnsName(ctx: any, info: GraphQLResolveInfo, args: CreateOneEnsNameArgs): Promise<EnsName>;
    deleteManyEnsName(ctx: any, info: GraphQLResolveInfo, args: DeleteManyEnsNameArgs): Promise<AffectedRowsOutput>;
    deleteOneEnsName(ctx: any, info: GraphQLResolveInfo, args: DeleteOneEnsNameArgs): Promise<EnsName | null>;
    findFirstEnsName(ctx: any, info: GraphQLResolveInfo, args: FindFirstEnsNameArgs): Promise<EnsName | null>;
    findFirstEnsNameOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstEnsNameOrThrowArgs): Promise<EnsName | null>;
    ensNames(ctx: any, info: GraphQLResolveInfo, args: FindManyEnsNameArgs): Promise<EnsName[]>;
    ensName(ctx: any, info: GraphQLResolveInfo, args: FindUniqueEnsNameArgs): Promise<EnsName | null>;
    getEnsName(ctx: any, info: GraphQLResolveInfo, args: FindUniqueEnsNameOrThrowArgs): Promise<EnsName | null>;
    groupByEnsName(ctx: any, info: GraphQLResolveInfo, args: GroupByEnsNameArgs): Promise<EnsNameGroupBy[]>;
    updateManyEnsName(ctx: any, info: GraphQLResolveInfo, args: UpdateManyEnsNameArgs): Promise<AffectedRowsOutput>;
    updateOneEnsName(ctx: any, info: GraphQLResolveInfo, args: UpdateOneEnsNameArgs): Promise<EnsName | null>;
    upsertOneEnsName(ctx: any, info: GraphQLResolveInfo, args: UpsertOneEnsNameArgs): Promise<EnsName>;
}
