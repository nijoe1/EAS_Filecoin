"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnsNameCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateEnsNameArgs_1 = require("./args/AggregateEnsNameArgs");
const CreateManyEnsNameArgs_1 = require("./args/CreateManyEnsNameArgs");
const CreateOneEnsNameArgs_1 = require("./args/CreateOneEnsNameArgs");
const DeleteManyEnsNameArgs_1 = require("./args/DeleteManyEnsNameArgs");
const DeleteOneEnsNameArgs_1 = require("./args/DeleteOneEnsNameArgs");
const FindFirstEnsNameArgs_1 = require("./args/FindFirstEnsNameArgs");
const FindFirstEnsNameOrThrowArgs_1 = require("./args/FindFirstEnsNameOrThrowArgs");
const FindManyEnsNameArgs_1 = require("./args/FindManyEnsNameArgs");
const FindUniqueEnsNameArgs_1 = require("./args/FindUniqueEnsNameArgs");
const FindUniqueEnsNameOrThrowArgs_1 = require("./args/FindUniqueEnsNameOrThrowArgs");
const GroupByEnsNameArgs_1 = require("./args/GroupByEnsNameArgs");
const UpdateManyEnsNameArgs_1 = require("./args/UpdateManyEnsNameArgs");
const UpdateOneEnsNameArgs_1 = require("./args/UpdateOneEnsNameArgs");
const UpsertOneEnsNameArgs_1 = require("./args/UpsertOneEnsNameArgs");
const helpers_1 = require("../../../helpers");
const EnsName_1 = require("../../../models/EnsName");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateEnsName_1 = require("../../outputs/AggregateEnsName");
const EnsNameGroupBy_1 = require("../../outputs/EnsNameGroupBy");
let EnsNameCrudResolver = class EnsNameCrudResolver {
    async aggregateEnsName(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
    async createManyEnsName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneEnsName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyEnsName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneEnsName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstEnsName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstEnsNameOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async ensNames(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async ensName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async getEnsName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupByEnsName(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManyEnsName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneEnsName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneEnsName(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).ensName.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateEnsName_1.AggregateEnsName, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateEnsNameArgs_1.AggregateEnsNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "aggregateEnsName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyEnsNameArgs_1.CreateManyEnsNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "createManyEnsName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => EnsName_1.EnsName, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneEnsNameArgs_1.CreateOneEnsNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "createOneEnsName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyEnsNameArgs_1.DeleteManyEnsNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "deleteManyEnsName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => EnsName_1.EnsName, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneEnsNameArgs_1.DeleteOneEnsNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "deleteOneEnsName", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => EnsName_1.EnsName, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstEnsNameArgs_1.FindFirstEnsNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "findFirstEnsName", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => EnsName_1.EnsName, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstEnsNameOrThrowArgs_1.FindFirstEnsNameOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "findFirstEnsNameOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [EnsName_1.EnsName], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyEnsNameArgs_1.FindManyEnsNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "ensNames", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => EnsName_1.EnsName, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueEnsNameArgs_1.FindUniqueEnsNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "ensName", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => EnsName_1.EnsName, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueEnsNameOrThrowArgs_1.FindUniqueEnsNameOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "getEnsName", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [EnsNameGroupBy_1.EnsNameGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByEnsNameArgs_1.GroupByEnsNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "groupByEnsName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyEnsNameArgs_1.UpdateManyEnsNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "updateManyEnsName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => EnsName_1.EnsName, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneEnsNameArgs_1.UpdateOneEnsNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "updateOneEnsName", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => EnsName_1.EnsName, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneEnsNameArgs_1.UpsertOneEnsNameArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], EnsNameCrudResolver.prototype, "upsertOneEnsName", null);
EnsNameCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => EnsName_1.EnsName)
], EnsNameCrudResolver);
exports.EnsNameCrudResolver = EnsNameCrudResolver;
