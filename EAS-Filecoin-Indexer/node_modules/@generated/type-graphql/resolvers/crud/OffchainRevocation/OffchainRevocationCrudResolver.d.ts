import type { GraphQLResolveInfo } from "graphql";
import { AggregateOffchainRevocationArgs } from "./args/AggregateOffchainRevocationArgs";
import { CreateManyOffchainRevocationArgs } from "./args/CreateManyOffchainRevocationArgs";
import { CreateOneOffchainRevocationArgs } from "./args/CreateOneOffchainRevocationArgs";
import { DeleteManyOffchainRevocationArgs } from "./args/DeleteManyOffchainRevocationArgs";
import { DeleteOneOffchainRevocationArgs } from "./args/DeleteOneOffchainRevocationArgs";
import { FindFirstOffchainRevocationArgs } from "./args/FindFirstOffchainRevocationArgs";
import { FindFirstOffchainRevocationOrThrowArgs } from "./args/FindFirstOffchainRevocationOrThrowArgs";
import { FindManyOffchainRevocationArgs } from "./args/FindManyOffchainRevocationArgs";
import { FindUniqueOffchainRevocationArgs } from "./args/FindUniqueOffchainRevocationArgs";
import { FindUniqueOffchainRevocationOrThrowArgs } from "./args/FindUniqueOffchainRevocationOrThrowArgs";
import { GroupByOffchainRevocationArgs } from "./args/GroupByOffchainRevocationArgs";
import { UpdateManyOffchainRevocationArgs } from "./args/UpdateManyOffchainRevocationArgs";
import { UpdateOneOffchainRevocationArgs } from "./args/UpdateOneOffchainRevocationArgs";
import { UpsertOneOffchainRevocationArgs } from "./args/UpsertOneOffchainRevocationArgs";
import { OffchainRevocation } from "../../../models/OffchainRevocation";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateOffchainRevocation } from "../../outputs/AggregateOffchainRevocation";
import { OffchainRevocationGroupBy } from "../../outputs/OffchainRevocationGroupBy";
export declare class OffchainRevocationCrudResolver {
    aggregateOffchainRevocation(ctx: any, info: GraphQLResolveInfo, args: AggregateOffchainRevocationArgs): Promise<AggregateOffchainRevocation>;
    createManyOffchainRevocation(ctx: any, info: GraphQLResolveInfo, args: CreateManyOffchainRevocationArgs): Promise<AffectedRowsOutput>;
    createOneOffchainRevocation(ctx: any, info: GraphQLResolveInfo, args: CreateOneOffchainRevocationArgs): Promise<OffchainRevocation>;
    deleteManyOffchainRevocation(ctx: any, info: GraphQLResolveInfo, args: DeleteManyOffchainRevocationArgs): Promise<AffectedRowsOutput>;
    deleteOneOffchainRevocation(ctx: any, info: GraphQLResolveInfo, args: DeleteOneOffchainRevocationArgs): Promise<OffchainRevocation | null>;
    findFirstOffchainRevocation(ctx: any, info: GraphQLResolveInfo, args: FindFirstOffchainRevocationArgs): Promise<OffchainRevocation | null>;
    findFirstOffchainRevocationOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstOffchainRevocationOrThrowArgs): Promise<OffchainRevocation | null>;
    offchainRevocations(ctx: any, info: GraphQLResolveInfo, args: FindManyOffchainRevocationArgs): Promise<OffchainRevocation[]>;
    offchainRevocation(ctx: any, info: GraphQLResolveInfo, args: FindUniqueOffchainRevocationArgs): Promise<OffchainRevocation | null>;
    getOffchainRevocation(ctx: any, info: GraphQLResolveInfo, args: FindUniqueOffchainRevocationOrThrowArgs): Promise<OffchainRevocation | null>;
    groupByOffchainRevocation(ctx: any, info: GraphQLResolveInfo, args: GroupByOffchainRevocationArgs): Promise<OffchainRevocationGroupBy[]>;
    updateManyOffchainRevocation(ctx: any, info: GraphQLResolveInfo, args: UpdateManyOffchainRevocationArgs): Promise<AffectedRowsOutput>;
    updateOneOffchainRevocation(ctx: any, info: GraphQLResolveInfo, args: UpdateOneOffchainRevocationArgs): Promise<OffchainRevocation | null>;
    upsertOneOffchainRevocation(ctx: any, info: GraphQLResolveInfo, args: UpsertOneOffchainRevocationArgs): Promise<OffchainRevocation>;
}
