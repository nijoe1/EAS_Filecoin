"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimestampCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateTimestampArgs_1 = require("./args/AggregateTimestampArgs");
const CreateManyTimestampArgs_1 = require("./args/CreateManyTimestampArgs");
const CreateOneTimestampArgs_1 = require("./args/CreateOneTimestampArgs");
const DeleteManyTimestampArgs_1 = require("./args/DeleteManyTimestampArgs");
const DeleteOneTimestampArgs_1 = require("./args/DeleteOneTimestampArgs");
const FindFirstTimestampArgs_1 = require("./args/FindFirstTimestampArgs");
const FindFirstTimestampOrThrowArgs_1 = require("./args/FindFirstTimestampOrThrowArgs");
const FindManyTimestampArgs_1 = require("./args/FindManyTimestampArgs");
const FindUniqueTimestampArgs_1 = require("./args/FindUniqueTimestampArgs");
const FindUniqueTimestampOrThrowArgs_1 = require("./args/FindUniqueTimestampOrThrowArgs");
const GroupByTimestampArgs_1 = require("./args/GroupByTimestampArgs");
const UpdateManyTimestampArgs_1 = require("./args/UpdateManyTimestampArgs");
const UpdateOneTimestampArgs_1 = require("./args/UpdateOneTimestampArgs");
const UpsertOneTimestampArgs_1 = require("./args/UpsertOneTimestampArgs");
const helpers_1 = require("../../../helpers");
const Timestamp_1 = require("../../../models/Timestamp");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateTimestamp_1 = require("../../outputs/AggregateTimestamp");
const TimestampGroupBy_1 = require("../../outputs/TimestampGroupBy");
let TimestampCrudResolver = class TimestampCrudResolver {
    async aggregateTimestamp(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
    async createManyTimestamp(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneTimestamp(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyTimestamp(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneTimestamp(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstTimestamp(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstTimestampOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async timestamps(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async timestamp(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async getTimestamp(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupByTimestamp(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManyTimestamp(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneTimestamp(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneTimestamp(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).timestamp.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateTimestamp_1.AggregateTimestamp, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateTimestampArgs_1.AggregateTimestampArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "aggregateTimestamp", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyTimestampArgs_1.CreateManyTimestampArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "createManyTimestamp", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Timestamp_1.Timestamp, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneTimestampArgs_1.CreateOneTimestampArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "createOneTimestamp", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyTimestampArgs_1.DeleteManyTimestampArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "deleteManyTimestamp", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Timestamp_1.Timestamp, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneTimestampArgs_1.DeleteOneTimestampArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "deleteOneTimestamp", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Timestamp_1.Timestamp, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstTimestampArgs_1.FindFirstTimestampArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "findFirstTimestamp", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Timestamp_1.Timestamp, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstTimestampOrThrowArgs_1.FindFirstTimestampOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "findFirstTimestampOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [Timestamp_1.Timestamp], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyTimestampArgs_1.FindManyTimestampArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "timestamps", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Timestamp_1.Timestamp, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueTimestampArgs_1.FindUniqueTimestampArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "timestamp", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Timestamp_1.Timestamp, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueTimestampOrThrowArgs_1.FindUniqueTimestampOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "getTimestamp", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [TimestampGroupBy_1.TimestampGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByTimestampArgs_1.GroupByTimestampArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "groupByTimestamp", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyTimestampArgs_1.UpdateManyTimestampArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "updateManyTimestamp", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Timestamp_1.Timestamp, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneTimestampArgs_1.UpdateOneTimestampArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "updateOneTimestamp", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Timestamp_1.Timestamp, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneTimestampArgs_1.UpsertOneTimestampArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], TimestampCrudResolver.prototype, "upsertOneTimestamp", null);
TimestampCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Timestamp_1.Timestamp)
], TimestampCrudResolver);
exports.TimestampCrudResolver = TimestampCrudResolver;
