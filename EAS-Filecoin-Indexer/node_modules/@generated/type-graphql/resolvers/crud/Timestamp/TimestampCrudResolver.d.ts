import type { GraphQLResolveInfo } from "graphql";
import { AggregateTimestampArgs } from "./args/AggregateTimestampArgs";
import { CreateManyTimestampArgs } from "./args/CreateManyTimestampArgs";
import { CreateOneTimestampArgs } from "./args/CreateOneTimestampArgs";
import { DeleteManyTimestampArgs } from "./args/DeleteManyTimestampArgs";
import { DeleteOneTimestampArgs } from "./args/DeleteOneTimestampArgs";
import { FindFirstTimestampArgs } from "./args/FindFirstTimestampArgs";
import { FindFirstTimestampOrThrowArgs } from "./args/FindFirstTimestampOrThrowArgs";
import { FindManyTimestampArgs } from "./args/FindManyTimestampArgs";
import { FindUniqueTimestampArgs } from "./args/FindUniqueTimestampArgs";
import { FindUniqueTimestampOrThrowArgs } from "./args/FindUniqueTimestampOrThrowArgs";
import { GroupByTimestampArgs } from "./args/GroupByTimestampArgs";
import { UpdateManyTimestampArgs } from "./args/UpdateManyTimestampArgs";
import { UpdateOneTimestampArgs } from "./args/UpdateOneTimestampArgs";
import { UpsertOneTimestampArgs } from "./args/UpsertOneTimestampArgs";
import { Timestamp } from "../../../models/Timestamp";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTimestamp } from "../../outputs/AggregateTimestamp";
import { TimestampGroupBy } from "../../outputs/TimestampGroupBy";
export declare class TimestampCrudResolver {
    aggregateTimestamp(ctx: any, info: GraphQLResolveInfo, args: AggregateTimestampArgs): Promise<AggregateTimestamp>;
    createManyTimestamp(ctx: any, info: GraphQLResolveInfo, args: CreateManyTimestampArgs): Promise<AffectedRowsOutput>;
    createOneTimestamp(ctx: any, info: GraphQLResolveInfo, args: CreateOneTimestampArgs): Promise<Timestamp>;
    deleteManyTimestamp(ctx: any, info: GraphQLResolveInfo, args: DeleteManyTimestampArgs): Promise<AffectedRowsOutput>;
    deleteOneTimestamp(ctx: any, info: GraphQLResolveInfo, args: DeleteOneTimestampArgs): Promise<Timestamp | null>;
    findFirstTimestamp(ctx: any, info: GraphQLResolveInfo, args: FindFirstTimestampArgs): Promise<Timestamp | null>;
    findFirstTimestampOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstTimestampOrThrowArgs): Promise<Timestamp | null>;
    timestamps(ctx: any, info: GraphQLResolveInfo, args: FindManyTimestampArgs): Promise<Timestamp[]>;
    timestamp(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTimestampArgs): Promise<Timestamp | null>;
    getTimestamp(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTimestampOrThrowArgs): Promise<Timestamp | null>;
    groupByTimestamp(ctx: any, info: GraphQLResolveInfo, args: GroupByTimestampArgs): Promise<TimestampGroupBy[]>;
    updateManyTimestamp(ctx: any, info: GraphQLResolveInfo, args: UpdateManyTimestampArgs): Promise<AffectedRowsOutput>;
    updateOneTimestamp(ctx: any, info: GraphQLResolveInfo, args: UpdateOneTimestampArgs): Promise<Timestamp | null>;
    upsertOneTimestamp(ctx: any, info: GraphQLResolveInfo, args: UpsertOneTimestampArgs): Promise<Timestamp>;
}
