"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupByAttestationArgs = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AttestationOrderByWithAggregationInput_1 = require("../../../inputs/AttestationOrderByWithAggregationInput");
const AttestationScalarWhereWithAggregatesInput_1 = require("../../../inputs/AttestationScalarWhereWithAggregatesInput");
const AttestationWhereInput_1 = require("../../../inputs/AttestationWhereInput");
const AttestationScalarFieldEnum_1 = require("../../../../enums/AttestationScalarFieldEnum");
let GroupByAttestationArgs = class GroupByAttestationArgs {
};
tslib_1.__decorate([
    TypeGraphQL.Field(_type => AttestationWhereInput_1.AttestationWhereInput, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", AttestationWhereInput_1.AttestationWhereInput)
], GroupByAttestationArgs.prototype, "where", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => [AttestationOrderByWithAggregationInput_1.AttestationOrderByWithAggregationInput], {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Array)
], GroupByAttestationArgs.prototype, "orderBy", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => [AttestationScalarFieldEnum_1.AttestationScalarFieldEnum], {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Array)
], GroupByAttestationArgs.prototype, "by", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => AttestationScalarWhereWithAggregatesInput_1.AttestationScalarWhereWithAggregatesInput, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", AttestationScalarWhereWithAggregatesInput_1.AttestationScalarWhereWithAggregatesInput)
], GroupByAttestationArgs.prototype, "having", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Number)
], GroupByAttestationArgs.prototype, "take", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Number)
], GroupByAttestationArgs.prototype, "skip", void 0);
GroupByAttestationArgs = tslib_1.__decorate([
    TypeGraphQL.ArgsType()
], GroupByAttestationArgs);
exports.GroupByAttestationArgs = GroupByAttestationArgs;
