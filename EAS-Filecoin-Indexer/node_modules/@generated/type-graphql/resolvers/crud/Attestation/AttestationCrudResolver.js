"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestationCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateAttestationArgs_1 = require("./args/AggregateAttestationArgs");
const CreateManyAttestationArgs_1 = require("./args/CreateManyAttestationArgs");
const CreateOneAttestationArgs_1 = require("./args/CreateOneAttestationArgs");
const DeleteManyAttestationArgs_1 = require("./args/DeleteManyAttestationArgs");
const DeleteOneAttestationArgs_1 = require("./args/DeleteOneAttestationArgs");
const FindFirstAttestationArgs_1 = require("./args/FindFirstAttestationArgs");
const FindFirstAttestationOrThrowArgs_1 = require("./args/FindFirstAttestationOrThrowArgs");
const FindManyAttestationArgs_1 = require("./args/FindManyAttestationArgs");
const FindUniqueAttestationArgs_1 = require("./args/FindUniqueAttestationArgs");
const FindUniqueAttestationOrThrowArgs_1 = require("./args/FindUniqueAttestationOrThrowArgs");
const GroupByAttestationArgs_1 = require("./args/GroupByAttestationArgs");
const UpdateManyAttestationArgs_1 = require("./args/UpdateManyAttestationArgs");
const UpdateOneAttestationArgs_1 = require("./args/UpdateOneAttestationArgs");
const UpsertOneAttestationArgs_1 = require("./args/UpsertOneAttestationArgs");
const helpers_1 = require("../../../helpers");
const Attestation_1 = require("../../../models/Attestation");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateAttestation_1 = require("../../outputs/AggregateAttestation");
const AttestationGroupBy_1 = require("../../outputs/AttestationGroupBy");
let AttestationCrudResolver = class AttestationCrudResolver {
    async aggregateAttestation(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
    async createManyAttestation(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneAttestation(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyAttestation(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneAttestation(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstAttestation(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstAttestationOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async attestations(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async attestation(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async getAttestation(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupByAttestation(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManyAttestation(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneAttestation(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneAttestation(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).attestation.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateAttestation_1.AggregateAttestation, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateAttestationArgs_1.AggregateAttestationArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "aggregateAttestation", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyAttestationArgs_1.CreateManyAttestationArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "createManyAttestation", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Attestation_1.Attestation, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneAttestationArgs_1.CreateOneAttestationArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "createOneAttestation", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyAttestationArgs_1.DeleteManyAttestationArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "deleteManyAttestation", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Attestation_1.Attestation, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneAttestationArgs_1.DeleteOneAttestationArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "deleteOneAttestation", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Attestation_1.Attestation, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstAttestationArgs_1.FindFirstAttestationArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "findFirstAttestation", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Attestation_1.Attestation, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstAttestationOrThrowArgs_1.FindFirstAttestationOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "findFirstAttestationOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [Attestation_1.Attestation], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyAttestationArgs_1.FindManyAttestationArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "attestations", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Attestation_1.Attestation, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueAttestationArgs_1.FindUniqueAttestationArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "attestation", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Attestation_1.Attestation, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueAttestationOrThrowArgs_1.FindUniqueAttestationOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "getAttestation", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [AttestationGroupBy_1.AttestationGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByAttestationArgs_1.GroupByAttestationArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "groupByAttestation", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyAttestationArgs_1.UpdateManyAttestationArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "updateManyAttestation", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Attestation_1.Attestation, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneAttestationArgs_1.UpdateOneAttestationArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "updateOneAttestation", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Attestation_1.Attestation, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneAttestationArgs_1.UpsertOneAttestationArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AttestationCrudResolver.prototype, "upsertOneAttestation", null);
AttestationCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Attestation_1.Attestation)
], AttestationCrudResolver);
exports.AttestationCrudResolver = AttestationCrudResolver;
