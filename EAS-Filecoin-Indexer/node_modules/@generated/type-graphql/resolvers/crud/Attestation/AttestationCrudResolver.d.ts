import type { GraphQLResolveInfo } from "graphql";
import { AggregateAttestationArgs } from "./args/AggregateAttestationArgs";
import { CreateManyAttestationArgs } from "./args/CreateManyAttestationArgs";
import { CreateOneAttestationArgs } from "./args/CreateOneAttestationArgs";
import { DeleteManyAttestationArgs } from "./args/DeleteManyAttestationArgs";
import { DeleteOneAttestationArgs } from "./args/DeleteOneAttestationArgs";
import { FindFirstAttestationArgs } from "./args/FindFirstAttestationArgs";
import { FindFirstAttestationOrThrowArgs } from "./args/FindFirstAttestationOrThrowArgs";
import { FindManyAttestationArgs } from "./args/FindManyAttestationArgs";
import { FindUniqueAttestationArgs } from "./args/FindUniqueAttestationArgs";
import { FindUniqueAttestationOrThrowArgs } from "./args/FindUniqueAttestationOrThrowArgs";
import { GroupByAttestationArgs } from "./args/GroupByAttestationArgs";
import { UpdateManyAttestationArgs } from "./args/UpdateManyAttestationArgs";
import { UpdateOneAttestationArgs } from "./args/UpdateOneAttestationArgs";
import { UpsertOneAttestationArgs } from "./args/UpsertOneAttestationArgs";
import { Attestation } from "../../../models/Attestation";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateAttestation } from "../../outputs/AggregateAttestation";
import { AttestationGroupBy } from "../../outputs/AttestationGroupBy";
export declare class AttestationCrudResolver {
    aggregateAttestation(ctx: any, info: GraphQLResolveInfo, args: AggregateAttestationArgs): Promise<AggregateAttestation>;
    createManyAttestation(ctx: any, info: GraphQLResolveInfo, args: CreateManyAttestationArgs): Promise<AffectedRowsOutput>;
    createOneAttestation(ctx: any, info: GraphQLResolveInfo, args: CreateOneAttestationArgs): Promise<Attestation>;
    deleteManyAttestation(ctx: any, info: GraphQLResolveInfo, args: DeleteManyAttestationArgs): Promise<AffectedRowsOutput>;
    deleteOneAttestation(ctx: any, info: GraphQLResolveInfo, args: DeleteOneAttestationArgs): Promise<Attestation | null>;
    findFirstAttestation(ctx: any, info: GraphQLResolveInfo, args: FindFirstAttestationArgs): Promise<Attestation | null>;
    findFirstAttestationOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstAttestationOrThrowArgs): Promise<Attestation | null>;
    attestations(ctx: any, info: GraphQLResolveInfo, args: FindManyAttestationArgs): Promise<Attestation[]>;
    attestation(ctx: any, info: GraphQLResolveInfo, args: FindUniqueAttestationArgs): Promise<Attestation | null>;
    getAttestation(ctx: any, info: GraphQLResolveInfo, args: FindUniqueAttestationOrThrowArgs): Promise<Attestation | null>;
    groupByAttestation(ctx: any, info: GraphQLResolveInfo, args: GroupByAttestationArgs): Promise<AttestationGroupBy[]>;
    updateManyAttestation(ctx: any, info: GraphQLResolveInfo, args: UpdateManyAttestationArgs): Promise<AffectedRowsOutput>;
    updateOneAttestation(ctx: any, info: GraphQLResolveInfo, args: UpdateOneAttestationArgs): Promise<Attestation | null>;
    upsertOneAttestation(ctx: any, info: GraphQLResolveInfo, args: UpsertOneAttestationArgs): Promise<Attestation>;
}
