"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestationGroupBy = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AttestationAvgAggregate_1 = require("../outputs/AttestationAvgAggregate");
const AttestationCountAggregate_1 = require("../outputs/AttestationCountAggregate");
const AttestationMaxAggregate_1 = require("../outputs/AttestationMaxAggregate");
const AttestationMinAggregate_1 = require("../outputs/AttestationMinAggregate");
const AttestationSumAggregate_1 = require("../outputs/AttestationSumAggregate");
let AttestationGroupBy = class AttestationGroupBy {
};
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], AttestationGroupBy.prototype, "id", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], AttestationGroupBy.prototype, "data", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], AttestationGroupBy.prototype, "decodedDataJson", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], AttestationGroupBy.prototype, "recipient", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], AttestationGroupBy.prototype, "attester", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Number)
], AttestationGroupBy.prototype, "time", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Number)
], AttestationGroupBy.prototype, "timeCreated", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Number)
], AttestationGroupBy.prototype, "expirationTime", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Number)
], AttestationGroupBy.prototype, "revocationTime", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], AttestationGroupBy.prototype, "refUID", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => Boolean, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Boolean)
], AttestationGroupBy.prototype, "revocable", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => Boolean, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Boolean)
], AttestationGroupBy.prototype, "revoked", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], AttestationGroupBy.prototype, "txid", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], AttestationGroupBy.prototype, "schemaId", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], AttestationGroupBy.prototype, "ipfsHash", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => Boolean, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Boolean)
], AttestationGroupBy.prototype, "isOffchain", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => AttestationCountAggregate_1.AttestationCountAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", AttestationCountAggregate_1.AttestationCountAggregate)
], AttestationGroupBy.prototype, "_count", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => AttestationAvgAggregate_1.AttestationAvgAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", AttestationAvgAggregate_1.AttestationAvgAggregate)
], AttestationGroupBy.prototype, "_avg", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => AttestationSumAggregate_1.AttestationSumAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", AttestationSumAggregate_1.AttestationSumAggregate)
], AttestationGroupBy.prototype, "_sum", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => AttestationMinAggregate_1.AttestationMinAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", AttestationMinAggregate_1.AttestationMinAggregate)
], AttestationGroupBy.prototype, "_min", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => AttestationMaxAggregate_1.AttestationMaxAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", AttestationMaxAggregate_1.AttestationMaxAggregate)
], AttestationGroupBy.prototype, "_max", void 0);
AttestationGroupBy = tslib_1.__decorate([
    TypeGraphQL.ObjectType("AttestationGroupBy", {
        isAbstract: true
    })
], AttestationGroupBy);
exports.AttestationGroupBy = AttestationGroupBy;
