"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaGroupBy = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const SchemaAvgAggregate_1 = require("../outputs/SchemaAvgAggregate");
const SchemaCountAggregate_1 = require("../outputs/SchemaCountAggregate");
const SchemaMaxAggregate_1 = require("../outputs/SchemaMaxAggregate");
const SchemaMinAggregate_1 = require("../outputs/SchemaMinAggregate");
const SchemaSumAggregate_1 = require("../outputs/SchemaSumAggregate");
let SchemaGroupBy = class SchemaGroupBy {
};
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], SchemaGroupBy.prototype, "id", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], SchemaGroupBy.prototype, "schema", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], SchemaGroupBy.prototype, "creator", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], SchemaGroupBy.prototype, "resolver", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => Boolean, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Boolean)
], SchemaGroupBy.prototype, "revocable", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], SchemaGroupBy.prototype, "index", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], SchemaGroupBy.prototype, "txid", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Number)
], SchemaGroupBy.prototype, "time", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => SchemaCountAggregate_1.SchemaCountAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", SchemaCountAggregate_1.SchemaCountAggregate)
], SchemaGroupBy.prototype, "_count", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => SchemaAvgAggregate_1.SchemaAvgAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", SchemaAvgAggregate_1.SchemaAvgAggregate)
], SchemaGroupBy.prototype, "_avg", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => SchemaSumAggregate_1.SchemaSumAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", SchemaSumAggregate_1.SchemaSumAggregate)
], SchemaGroupBy.prototype, "_sum", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => SchemaMinAggregate_1.SchemaMinAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", SchemaMinAggregate_1.SchemaMinAggregate)
], SchemaGroupBy.prototype, "_min", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => SchemaMaxAggregate_1.SchemaMaxAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", SchemaMaxAggregate_1.SchemaMaxAggregate)
], SchemaGroupBy.prototype, "_max", void 0);
SchemaGroupBy = tslib_1.__decorate([
    TypeGraphQL.ObjectType("SchemaGroupBy", {
        isAbstract: true
    })
], SchemaGroupBy);
exports.SchemaGroupBy = SchemaGroupBy;
