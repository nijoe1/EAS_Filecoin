"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaNameGroupBy = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const SchemaNameAvgAggregate_1 = require("../outputs/SchemaNameAvgAggregate");
const SchemaNameCountAggregate_1 = require("../outputs/SchemaNameCountAggregate");
const SchemaNameMaxAggregate_1 = require("../outputs/SchemaNameMaxAggregate");
const SchemaNameMinAggregate_1 = require("../outputs/SchemaNameMinAggregate");
const SchemaNameSumAggregate_1 = require("../outputs/SchemaNameSumAggregate");
let SchemaNameGroupBy = class SchemaNameGroupBy {
};
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], SchemaNameGroupBy.prototype, "id", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], SchemaNameGroupBy.prototype, "schemaId", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], SchemaNameGroupBy.prototype, "attesterAddress", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], SchemaNameGroupBy.prototype, "name", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Number)
], SchemaNameGroupBy.prototype, "time", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => Boolean, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Boolean)
], SchemaNameGroupBy.prototype, "isCreator", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => SchemaNameCountAggregate_1.SchemaNameCountAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", SchemaNameCountAggregate_1.SchemaNameCountAggregate)
], SchemaNameGroupBy.prototype, "_count", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => SchemaNameAvgAggregate_1.SchemaNameAvgAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", SchemaNameAvgAggregate_1.SchemaNameAvgAggregate)
], SchemaNameGroupBy.prototype, "_avg", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => SchemaNameSumAggregate_1.SchemaNameSumAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", SchemaNameSumAggregate_1.SchemaNameSumAggregate)
], SchemaNameGroupBy.prototype, "_sum", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => SchemaNameMinAggregate_1.SchemaNameMinAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", SchemaNameMinAggregate_1.SchemaNameMinAggregate)
], SchemaNameGroupBy.prototype, "_min", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => SchemaNameMaxAggregate_1.SchemaNameMaxAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", SchemaNameMaxAggregate_1.SchemaNameMaxAggregate)
], SchemaNameGroupBy.prototype, "_max", void 0);
SchemaNameGroupBy = tslib_1.__decorate([
    TypeGraphQL.ObjectType("SchemaNameGroupBy", {
        isAbstract: true
    })
], SchemaNameGroupBy);
exports.SchemaNameGroupBy = SchemaNameGroupBy;
