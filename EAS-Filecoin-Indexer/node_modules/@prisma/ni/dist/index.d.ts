/// <reference types="node" />

export declare type Agent = keyof typeof AGENTS;

export declare const AGENTS: {
    npm: {
        agent: string;
        run: (args: string[]) => string;
        install: string;
        frozen: string;
        global: string;
        add: string;
        upgrade: string;
        'upgrade-interactive': null;
        execute: string;
        uninstall: string;
        global_uninstall: string;
    };
    yarn: {
        agent: string;
        run: string;
        install: string;
        frozen: string;
        global: string;
        add: string;
        upgrade: string;
        'upgrade-interactive': string;
        execute: string;
        uninstall: string;
        global_uninstall: string;
    };
    'yarn@berry': {
        frozen: string;
        upgrade: string;
        'upgrade-interactive': string;
        execute: string;
        global: string;
        global_uninstall: string;
        agent: string;
        run: string;
        install: string;
        add: string;
        uninstall: string;
    };
    pnpm: {
        agent: string;
        run: string;
        install: string;
        frozen: string;
        global: string;
        add: string;
        upgrade: string;
        'upgrade-interactive': string;
        execute: string;
        uninstall: string;
        global_uninstall: string;
    };
    'pnpm@6': {
        run: (args: string[]) => string;
        agent: string;
        install: string;
        frozen: string;
        global: string;
        add: string;
        upgrade: string;
        'upgrade-interactive': string;
        execute: string;
        uninstall: string;
        global_uninstall: string;
    };
    bun: {
        agent: string;
        run: string;
        install: string;
        frozen: string;
        global: string;
        add: string;
        upgrade: null;
        'upgrade-interactive': null;
        execute: string;
        uninstall: string;
        global_uninstall: string;
    };
};

export declare const agents: ("npm" | "pnpm" | "yarn" | "yarn@berry" | "pnpm@6" | "bun")[];

export declare const CLI_TEMP_DIR: string;

export declare function cmdExists(cmd: string): boolean;

export declare type Command = keyof typeof AGENTS.npm;

declare interface Config {
    defaultAgent: Agent | 'prompt';
    globalAgent: Agent;
}

export declare function detect({ autoInstall, programmatic, cwd }?: DetectOptions): Promise<"npm" | "pnpm" | "yarn" | "yarn@berry" | "pnpm@6" | "bun" | null>;

export declare interface DetectOptions {
    autoInstall?: boolean;
    programmatic?: boolean;
    cwd?: string;
}

export declare function exclude<T>(arr: T[], v: T): T[];

export declare function getCommand(agent: Agent, command: Command, args?: string[]): string;

export declare function getConfig(): Promise<Config>;

export declare function getDefaultAgent(programmatic?: boolean): Promise<"npm" | "pnpm" | "yarn" | "yarn@berry" | "pnpm@6" | "bun" | "prompt">;

export declare function getGlobalAgent(): Promise<"npm" | "pnpm" | "yarn" | "yarn@berry" | "pnpm@6" | "bun">;

export declare function getVoltaPrefix(): string;

export declare const INSTALL_PAGE: Record<Agent, string>;

export declare const LOCKS: Record<string, Agent>;

export declare const parseNa: Runner;

export declare const parseNi: Runner;

export declare const parseNlx: Runner;

export declare const parseNr: Runner;

export declare const parseNu: Runner;

export declare const parseNun: Runner;

export declare function remove<T>(arr: T[], v: T): T[];

export declare function run(fn: Runner, args: string[], options?: DetectOptions): Promise<void>;

export declare function runCli(fn: Runner, options?: DetectOptions): Promise<void>;

export declare type Runner = (agent: Agent, args: string[], ctx?: RunnerContext) => Promise<string | undefined> | string | undefined;

export declare interface RunnerContext {
    programmatic?: boolean;
    hasLock?: boolean;
    cwd?: string;
}

export declare class UnsupportedCommand extends Error {
    constructor({ agent, command }: {
        agent: Agent;
        command: Command;
    });
}

/**
 * Write file safely avoiding conflicts
 */
export declare function writeFileSafe(path: string, data?: string | Buffer): Promise<boolean>;

export { }
