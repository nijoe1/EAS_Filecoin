
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Schema
 * 
 */
export type Schema = {
  id: string
  schema: string
  creator: string
  resolver: string
  revocable: boolean
  index: string
  txid: string
  time: number
}

/**
 * Model Attestation
 * 
 */
export type Attestation = {
  id: string
  data: string
  decodedDataJson: string
  recipient: string
  attester: string
  time: number
  timeCreated: number
  expirationTime: number
  revocationTime: number
  refUID: string
  revocable: boolean
  revoked: boolean
  txid: string
  schemaId: string
  ipfsHash: string
  isOffchain: boolean
}

/**
 * Model SchemaName
 * 
 */
export type SchemaName = {
  id: string
  schemaId: string
  attesterAddress: string
  name: string
  time: number
  isCreator: boolean
}

/**
 * Model Timestamp
 * 
 */
export type Timestamp = {
  id: string
  from: string
  txid: string
  tree: string
  timestamp: number
}

/**
 * Model OffchainRevocation
 * 
 */
export type OffchainRevocation = {
  id: string
  from: string
  uid: string
  txid: string
  timestamp: number
}

/**
 * Model EnsName
 * 
 */
export type EnsName = {
  id: string
  name: string
  timestamp: number
}

/**
 * Model ServiceStat
 * 
 */
export type ServiceStat = {
  name: string
  value: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Schemata
 * const schemata = await prisma.schema.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Schemata
   * const schemata = await prisma.schema.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.schema`: Exposes CRUD operations for the **Schema** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schemata
    * const schemata = await prisma.schema.findMany()
    * ```
    */
  get schema(): Prisma.SchemaDelegate<GlobalReject>;

  /**
   * `prisma.attestation`: Exposes CRUD operations for the **Attestation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attestations
    * const attestations = await prisma.attestation.findMany()
    * ```
    */
  get attestation(): Prisma.AttestationDelegate<GlobalReject>;

  /**
   * `prisma.schemaName`: Exposes CRUD operations for the **SchemaName** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SchemaNames
    * const schemaNames = await prisma.schemaName.findMany()
    * ```
    */
  get schemaName(): Prisma.SchemaNameDelegate<GlobalReject>;

  /**
   * `prisma.timestamp`: Exposes CRUD operations for the **Timestamp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Timestamps
    * const timestamps = await prisma.timestamp.findMany()
    * ```
    */
  get timestamp(): Prisma.TimestampDelegate<GlobalReject>;

  /**
   * `prisma.offchainRevocation`: Exposes CRUD operations for the **OffchainRevocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OffchainRevocations
    * const offchainRevocations = await prisma.offchainRevocation.findMany()
    * ```
    */
  get offchainRevocation(): Prisma.OffchainRevocationDelegate<GlobalReject>;

  /**
   * `prisma.ensName`: Exposes CRUD operations for the **EnsName** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EnsNames
    * const ensNames = await prisma.ensName.findMany()
    * ```
    */
  get ensName(): Prisma.EnsNameDelegate<GlobalReject>;

  /**
   * `prisma.serviceStat`: Exposes CRUD operations for the **ServiceStat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceStats
    * const serviceStats = await prisma.serviceStat.findMany()
    * ```
    */
  get serviceStat(): Prisma.ServiceStatDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.13.0
   * Query Engine version: 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Schema: 'Schema',
    Attestation: 'Attestation',
    SchemaName: 'SchemaName',
    Timestamp: 'Timestamp',
    OffchainRevocation: 'OffchainRevocation',
    EnsName: 'EnsName',
    ServiceStat: 'ServiceStat'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SchemaCountOutputType
   */


  export type SchemaCountOutputType = {
    attestations: number
    schemaNames: number
  }

  export type SchemaCountOutputTypeSelect = {
    attestations?: boolean
    schemaNames?: boolean
  }

  export type SchemaCountOutputTypeGetPayload<S extends boolean | null | undefined | SchemaCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SchemaCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SchemaCountOutputTypeArgs)
    ? SchemaCountOutputType 
    : S extends { select: any } & (SchemaCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SchemaCountOutputType ? SchemaCountOutputType[P] : never
  } 
      : SchemaCountOutputType




  // Custom InputTypes

  /**
   * SchemaCountOutputType without action
   */
  export type SchemaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SchemaCountOutputType
     */
    select?: SchemaCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Schema
   */


  export type AggregateSchema = {
    _count: SchemaCountAggregateOutputType | null
    _avg: SchemaAvgAggregateOutputType | null
    _sum: SchemaSumAggregateOutputType | null
    _min: SchemaMinAggregateOutputType | null
    _max: SchemaMaxAggregateOutputType | null
  }

  export type SchemaAvgAggregateOutputType = {
    time: number | null
  }

  export type SchemaSumAggregateOutputType = {
    time: number | null
  }

  export type SchemaMinAggregateOutputType = {
    id: string | null
    schema: string | null
    creator: string | null
    resolver: string | null
    revocable: boolean | null
    index: string | null
    txid: string | null
    time: number | null
  }

  export type SchemaMaxAggregateOutputType = {
    id: string | null
    schema: string | null
    creator: string | null
    resolver: string | null
    revocable: boolean | null
    index: string | null
    txid: string | null
    time: number | null
  }

  export type SchemaCountAggregateOutputType = {
    id: number
    schema: number
    creator: number
    resolver: number
    revocable: number
    index: number
    txid: number
    time: number
    _all: number
  }


  export type SchemaAvgAggregateInputType = {
    time?: true
  }

  export type SchemaSumAggregateInputType = {
    time?: true
  }

  export type SchemaMinAggregateInputType = {
    id?: true
    schema?: true
    creator?: true
    resolver?: true
    revocable?: true
    index?: true
    txid?: true
    time?: true
  }

  export type SchemaMaxAggregateInputType = {
    id?: true
    schema?: true
    creator?: true
    resolver?: true
    revocable?: true
    index?: true
    txid?: true
    time?: true
  }

  export type SchemaCountAggregateInputType = {
    id?: true
    schema?: true
    creator?: true
    resolver?: true
    revocable?: true
    index?: true
    txid?: true
    time?: true
    _all?: true
  }

  export type SchemaAggregateArgs = {
    /**
     * Filter which Schema to aggregate.
     */
    where?: SchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schemata to fetch.
     */
    orderBy?: Enumerable<SchemaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schemata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schemata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schemata
    **/
    _count?: true | SchemaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchemaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchemaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchemaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchemaMaxAggregateInputType
  }

  export type GetSchemaAggregateType<T extends SchemaAggregateArgs> = {
        [P in keyof T & keyof AggregateSchema]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchema[P]>
      : GetScalarType<T[P], AggregateSchema[P]>
  }




  export type SchemaGroupByArgs = {
    where?: SchemaWhereInput
    orderBy?: Enumerable<SchemaOrderByWithAggregationInput>
    by: SchemaScalarFieldEnum[]
    having?: SchemaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchemaCountAggregateInputType | true
    _avg?: SchemaAvgAggregateInputType
    _sum?: SchemaSumAggregateInputType
    _min?: SchemaMinAggregateInputType
    _max?: SchemaMaxAggregateInputType
  }


  export type SchemaGroupByOutputType = {
    id: string
    schema: string
    creator: string
    resolver: string
    revocable: boolean
    index: string
    txid: string
    time: number
    _count: SchemaCountAggregateOutputType | null
    _avg: SchemaAvgAggregateOutputType | null
    _sum: SchemaSumAggregateOutputType | null
    _min: SchemaMinAggregateOutputType | null
    _max: SchemaMaxAggregateOutputType | null
  }

  type GetSchemaGroupByPayload<T extends SchemaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SchemaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchemaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchemaGroupByOutputType[P]>
            : GetScalarType<T[P], SchemaGroupByOutputType[P]>
        }
      >
    >


  export type SchemaSelect = {
    id?: boolean
    schema?: boolean
    creator?: boolean
    resolver?: boolean
    revocable?: boolean
    index?: boolean
    txid?: boolean
    time?: boolean
    attestations?: boolean | Schema$attestationsArgs
    schemaNames?: boolean | Schema$schemaNamesArgs
    _count?: boolean | SchemaCountOutputTypeArgs
  }


  export type SchemaInclude = {
    attestations?: boolean | Schema$attestationsArgs
    schemaNames?: boolean | Schema$schemaNamesArgs
    _count?: boolean | SchemaCountOutputTypeArgs
  }

  export type SchemaGetPayload<S extends boolean | null | undefined | SchemaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Schema :
    S extends undefined ? never :
    S extends { include: any } & (SchemaArgs | SchemaFindManyArgs)
    ? Schema  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'attestations' ? Array < AttestationGetPayload<S['include'][P]>>  :
        P extends 'schemaNames' ? Array < SchemaNameGetPayload<S['include'][P]>>  :
        P extends '_count' ? SchemaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SchemaArgs | SchemaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'attestations' ? Array < AttestationGetPayload<S['select'][P]>>  :
        P extends 'schemaNames' ? Array < SchemaNameGetPayload<S['select'][P]>>  :
        P extends '_count' ? SchemaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Schema ? Schema[P] : never
  } 
      : Schema


  type SchemaCountArgs = 
    Omit<SchemaFindManyArgs, 'select' | 'include'> & {
      select?: SchemaCountAggregateInputType | true
    }

  export interface SchemaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Schema that matches the filter.
     * @param {SchemaFindUniqueArgs} args - Arguments to find a Schema
     * @example
     * // Get one Schema
     * const schema = await prisma.schema.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SchemaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SchemaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Schema'> extends True ? Prisma__SchemaClient<SchemaGetPayload<T>> : Prisma__SchemaClient<SchemaGetPayload<T> | null, null>

    /**
     * Find one Schema that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SchemaFindUniqueOrThrowArgs} args - Arguments to find a Schema
     * @example
     * // Get one Schema
     * const schema = await prisma.schema.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SchemaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SchemaFindUniqueOrThrowArgs>
    ): Prisma__SchemaClient<SchemaGetPayload<T>>

    /**
     * Find the first Schema that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaFindFirstArgs} args - Arguments to find a Schema
     * @example
     * // Get one Schema
     * const schema = await prisma.schema.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SchemaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SchemaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Schema'> extends True ? Prisma__SchemaClient<SchemaGetPayload<T>> : Prisma__SchemaClient<SchemaGetPayload<T> | null, null>

    /**
     * Find the first Schema that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaFindFirstOrThrowArgs} args - Arguments to find a Schema
     * @example
     * // Get one Schema
     * const schema = await prisma.schema.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SchemaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SchemaFindFirstOrThrowArgs>
    ): Prisma__SchemaClient<SchemaGetPayload<T>>

    /**
     * Find zero or more Schemata that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schemata
     * const schemata = await prisma.schema.findMany()
     * 
     * // Get first 10 Schemata
     * const schemata = await prisma.schema.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schemaWithIdOnly = await prisma.schema.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SchemaFindManyArgs>(
      args?: SelectSubset<T, SchemaFindManyArgs>
    ): Prisma.PrismaPromise<Array<SchemaGetPayload<T>>>

    /**
     * Create a Schema.
     * @param {SchemaCreateArgs} args - Arguments to create a Schema.
     * @example
     * // Create one Schema
     * const Schema = await prisma.schema.create({
     *   data: {
     *     // ... data to create a Schema
     *   }
     * })
     * 
    **/
    create<T extends SchemaCreateArgs>(
      args: SelectSubset<T, SchemaCreateArgs>
    ): Prisma__SchemaClient<SchemaGetPayload<T>>

    /**
     * Create many Schemata.
     *     @param {SchemaCreateManyArgs} args - Arguments to create many Schemata.
     *     @example
     *     // Create many Schemata
     *     const schema = await prisma.schema.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SchemaCreateManyArgs>(
      args?: SelectSubset<T, SchemaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Schema.
     * @param {SchemaDeleteArgs} args - Arguments to delete one Schema.
     * @example
     * // Delete one Schema
     * const Schema = await prisma.schema.delete({
     *   where: {
     *     // ... filter to delete one Schema
     *   }
     * })
     * 
    **/
    delete<T extends SchemaDeleteArgs>(
      args: SelectSubset<T, SchemaDeleteArgs>
    ): Prisma__SchemaClient<SchemaGetPayload<T>>

    /**
     * Update one Schema.
     * @param {SchemaUpdateArgs} args - Arguments to update one Schema.
     * @example
     * // Update one Schema
     * const schema = await prisma.schema.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SchemaUpdateArgs>(
      args: SelectSubset<T, SchemaUpdateArgs>
    ): Prisma__SchemaClient<SchemaGetPayload<T>>

    /**
     * Delete zero or more Schemata.
     * @param {SchemaDeleteManyArgs} args - Arguments to filter Schemata to delete.
     * @example
     * // Delete a few Schemata
     * const { count } = await prisma.schema.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SchemaDeleteManyArgs>(
      args?: SelectSubset<T, SchemaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schemata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schemata
     * const schema = await prisma.schema.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SchemaUpdateManyArgs>(
      args: SelectSubset<T, SchemaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Schema.
     * @param {SchemaUpsertArgs} args - Arguments to update or create a Schema.
     * @example
     * // Update or create a Schema
     * const schema = await prisma.schema.upsert({
     *   create: {
     *     // ... data to create a Schema
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schema we want to update
     *   }
     * })
    **/
    upsert<T extends SchemaUpsertArgs>(
      args: SelectSubset<T, SchemaUpsertArgs>
    ): Prisma__SchemaClient<SchemaGetPayload<T>>

    /**
     * Count the number of Schemata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaCountArgs} args - Arguments to filter Schemata to count.
     * @example
     * // Count the number of Schemata
     * const count = await prisma.schema.count({
     *   where: {
     *     // ... the filter for the Schemata we want to count
     *   }
     * })
    **/
    count<T extends SchemaCountArgs>(
      args?: Subset<T, SchemaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchemaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schema.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchemaAggregateArgs>(args: Subset<T, SchemaAggregateArgs>): Prisma.PrismaPromise<GetSchemaAggregateType<T>>

    /**
     * Group by Schema.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchemaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchemaGroupByArgs['orderBy'] }
        : { orderBy?: SchemaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchemaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchemaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Schema.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SchemaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    attestations<T extends Schema$attestationsArgs= {}>(args?: Subset<T, Schema$attestationsArgs>): Prisma.PrismaPromise<Array<AttestationGetPayload<T>>| Null>;

    schemaNames<T extends Schema$schemaNamesArgs= {}>(args?: Subset<T, Schema$schemaNamesArgs>): Prisma.PrismaPromise<Array<SchemaNameGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Schema base type for findUnique actions
   */
  export type SchemaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Schema
     */
    select?: SchemaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaInclude | null
    /**
     * Filter, which Schema to fetch.
     */
    where: SchemaWhereUniqueInput
  }

  /**
   * Schema findUnique
   */
  export interface SchemaFindUniqueArgs extends SchemaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Schema findUniqueOrThrow
   */
  export type SchemaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Schema
     */
    select?: SchemaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaInclude | null
    /**
     * Filter, which Schema to fetch.
     */
    where: SchemaWhereUniqueInput
  }


  /**
   * Schema base type for findFirst actions
   */
  export type SchemaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Schema
     */
    select?: SchemaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaInclude | null
    /**
     * Filter, which Schema to fetch.
     */
    where?: SchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schemata to fetch.
     */
    orderBy?: Enumerable<SchemaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schemata.
     */
    cursor?: SchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schemata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schemata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schemata.
     */
    distinct?: Enumerable<SchemaScalarFieldEnum>
  }

  /**
   * Schema findFirst
   */
  export interface SchemaFindFirstArgs extends SchemaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Schema findFirstOrThrow
   */
  export type SchemaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Schema
     */
    select?: SchemaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaInclude | null
    /**
     * Filter, which Schema to fetch.
     */
    where?: SchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schemata to fetch.
     */
    orderBy?: Enumerable<SchemaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schemata.
     */
    cursor?: SchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schemata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schemata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schemata.
     */
    distinct?: Enumerable<SchemaScalarFieldEnum>
  }


  /**
   * Schema findMany
   */
  export type SchemaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Schema
     */
    select?: SchemaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaInclude | null
    /**
     * Filter, which Schemata to fetch.
     */
    where?: SchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schemata to fetch.
     */
    orderBy?: Enumerable<SchemaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schemata.
     */
    cursor?: SchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schemata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schemata.
     */
    skip?: number
    distinct?: Enumerable<SchemaScalarFieldEnum>
  }


  /**
   * Schema create
   */
  export type SchemaCreateArgs = {
    /**
     * Select specific fields to fetch from the Schema
     */
    select?: SchemaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaInclude | null
    /**
     * The data needed to create a Schema.
     */
    data: XOR<SchemaCreateInput, SchemaUncheckedCreateInput>
  }


  /**
   * Schema createMany
   */
  export type SchemaCreateManyArgs = {
    /**
     * The data used to create many Schemata.
     */
    data: Enumerable<SchemaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Schema update
   */
  export type SchemaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Schema
     */
    select?: SchemaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaInclude | null
    /**
     * The data needed to update a Schema.
     */
    data: XOR<SchemaUpdateInput, SchemaUncheckedUpdateInput>
    /**
     * Choose, which Schema to update.
     */
    where: SchemaWhereUniqueInput
  }


  /**
   * Schema updateMany
   */
  export type SchemaUpdateManyArgs = {
    /**
     * The data used to update Schemata.
     */
    data: XOR<SchemaUpdateManyMutationInput, SchemaUncheckedUpdateManyInput>
    /**
     * Filter which Schemata to update
     */
    where?: SchemaWhereInput
  }


  /**
   * Schema upsert
   */
  export type SchemaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Schema
     */
    select?: SchemaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaInclude | null
    /**
     * The filter to search for the Schema to update in case it exists.
     */
    where: SchemaWhereUniqueInput
    /**
     * In case the Schema found by the `where` argument doesn't exist, create a new Schema with this data.
     */
    create: XOR<SchemaCreateInput, SchemaUncheckedCreateInput>
    /**
     * In case the Schema was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchemaUpdateInput, SchemaUncheckedUpdateInput>
  }


  /**
   * Schema delete
   */
  export type SchemaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Schema
     */
    select?: SchemaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaInclude | null
    /**
     * Filter which Schema to delete.
     */
    where: SchemaWhereUniqueInput
  }


  /**
   * Schema deleteMany
   */
  export type SchemaDeleteManyArgs = {
    /**
     * Filter which Schemata to delete
     */
    where?: SchemaWhereInput
  }


  /**
   * Schema.attestations
   */
  export type Schema$attestationsArgs = {
    /**
     * Select specific fields to fetch from the Attestation
     */
    select?: AttestationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttestationInclude | null
    where?: AttestationWhereInput
    orderBy?: Enumerable<AttestationOrderByWithRelationInput>
    cursor?: AttestationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AttestationScalarFieldEnum>
  }


  /**
   * Schema.schemaNames
   */
  export type Schema$schemaNamesArgs = {
    /**
     * Select specific fields to fetch from the SchemaName
     */
    select?: SchemaNameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaNameInclude | null
    where?: SchemaNameWhereInput
    orderBy?: Enumerable<SchemaNameOrderByWithRelationInput>
    cursor?: SchemaNameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SchemaNameScalarFieldEnum>
  }


  /**
   * Schema without action
   */
  export type SchemaArgs = {
    /**
     * Select specific fields to fetch from the Schema
     */
    select?: SchemaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaInclude | null
  }



  /**
   * Model Attestation
   */


  export type AggregateAttestation = {
    _count: AttestationCountAggregateOutputType | null
    _avg: AttestationAvgAggregateOutputType | null
    _sum: AttestationSumAggregateOutputType | null
    _min: AttestationMinAggregateOutputType | null
    _max: AttestationMaxAggregateOutputType | null
  }

  export type AttestationAvgAggregateOutputType = {
    time: number | null
    timeCreated: number | null
    expirationTime: number | null
    revocationTime: number | null
  }

  export type AttestationSumAggregateOutputType = {
    time: number | null
    timeCreated: number | null
    expirationTime: number | null
    revocationTime: number | null
  }

  export type AttestationMinAggregateOutputType = {
    id: string | null
    data: string | null
    decodedDataJson: string | null
    recipient: string | null
    attester: string | null
    time: number | null
    timeCreated: number | null
    expirationTime: number | null
    revocationTime: number | null
    refUID: string | null
    revocable: boolean | null
    revoked: boolean | null
    txid: string | null
    schemaId: string | null
    ipfsHash: string | null
    isOffchain: boolean | null
  }

  export type AttestationMaxAggregateOutputType = {
    id: string | null
    data: string | null
    decodedDataJson: string | null
    recipient: string | null
    attester: string | null
    time: number | null
    timeCreated: number | null
    expirationTime: number | null
    revocationTime: number | null
    refUID: string | null
    revocable: boolean | null
    revoked: boolean | null
    txid: string | null
    schemaId: string | null
    ipfsHash: string | null
    isOffchain: boolean | null
  }

  export type AttestationCountAggregateOutputType = {
    id: number
    data: number
    decodedDataJson: number
    recipient: number
    attester: number
    time: number
    timeCreated: number
    expirationTime: number
    revocationTime: number
    refUID: number
    revocable: number
    revoked: number
    txid: number
    schemaId: number
    ipfsHash: number
    isOffchain: number
    _all: number
  }


  export type AttestationAvgAggregateInputType = {
    time?: true
    timeCreated?: true
    expirationTime?: true
    revocationTime?: true
  }

  export type AttestationSumAggregateInputType = {
    time?: true
    timeCreated?: true
    expirationTime?: true
    revocationTime?: true
  }

  export type AttestationMinAggregateInputType = {
    id?: true
    data?: true
    decodedDataJson?: true
    recipient?: true
    attester?: true
    time?: true
    timeCreated?: true
    expirationTime?: true
    revocationTime?: true
    refUID?: true
    revocable?: true
    revoked?: true
    txid?: true
    schemaId?: true
    ipfsHash?: true
    isOffchain?: true
  }

  export type AttestationMaxAggregateInputType = {
    id?: true
    data?: true
    decodedDataJson?: true
    recipient?: true
    attester?: true
    time?: true
    timeCreated?: true
    expirationTime?: true
    revocationTime?: true
    refUID?: true
    revocable?: true
    revoked?: true
    txid?: true
    schemaId?: true
    ipfsHash?: true
    isOffchain?: true
  }

  export type AttestationCountAggregateInputType = {
    id?: true
    data?: true
    decodedDataJson?: true
    recipient?: true
    attester?: true
    time?: true
    timeCreated?: true
    expirationTime?: true
    revocationTime?: true
    refUID?: true
    revocable?: true
    revoked?: true
    txid?: true
    schemaId?: true
    ipfsHash?: true
    isOffchain?: true
    _all?: true
  }

  export type AttestationAggregateArgs = {
    /**
     * Filter which Attestation to aggregate.
     */
    where?: AttestationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attestations to fetch.
     */
    orderBy?: Enumerable<AttestationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttestationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attestations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attestations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attestations
    **/
    _count?: true | AttestationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttestationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttestationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttestationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttestationMaxAggregateInputType
  }

  export type GetAttestationAggregateType<T extends AttestationAggregateArgs> = {
        [P in keyof T & keyof AggregateAttestation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttestation[P]>
      : GetScalarType<T[P], AggregateAttestation[P]>
  }




  export type AttestationGroupByArgs = {
    where?: AttestationWhereInput
    orderBy?: Enumerable<AttestationOrderByWithAggregationInput>
    by: AttestationScalarFieldEnum[]
    having?: AttestationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttestationCountAggregateInputType | true
    _avg?: AttestationAvgAggregateInputType
    _sum?: AttestationSumAggregateInputType
    _min?: AttestationMinAggregateInputType
    _max?: AttestationMaxAggregateInputType
  }


  export type AttestationGroupByOutputType = {
    id: string
    data: string
    decodedDataJson: string
    recipient: string
    attester: string
    time: number
    timeCreated: number
    expirationTime: number
    revocationTime: number
    refUID: string
    revocable: boolean
    revoked: boolean
    txid: string
    schemaId: string
    ipfsHash: string
    isOffchain: boolean
    _count: AttestationCountAggregateOutputType | null
    _avg: AttestationAvgAggregateOutputType | null
    _sum: AttestationSumAggregateOutputType | null
    _min: AttestationMinAggregateOutputType | null
    _max: AttestationMaxAggregateOutputType | null
  }

  type GetAttestationGroupByPayload<T extends AttestationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AttestationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttestationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttestationGroupByOutputType[P]>
            : GetScalarType<T[P], AttestationGroupByOutputType[P]>
        }
      >
    >


  export type AttestationSelect = {
    id?: boolean
    data?: boolean
    decodedDataJson?: boolean
    recipient?: boolean
    attester?: boolean
    time?: boolean
    timeCreated?: boolean
    expirationTime?: boolean
    revocationTime?: boolean
    refUID?: boolean
    revocable?: boolean
    revoked?: boolean
    txid?: boolean
    schemaId?: boolean
    ipfsHash?: boolean
    isOffchain?: boolean
    schema?: boolean | SchemaArgs
  }


  export type AttestationInclude = {
    schema?: boolean | SchemaArgs
  }

  export type AttestationGetPayload<S extends boolean | null | undefined | AttestationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Attestation :
    S extends undefined ? never :
    S extends { include: any } & (AttestationArgs | AttestationFindManyArgs)
    ? Attestation  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'schema' ? SchemaGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AttestationArgs | AttestationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'schema' ? SchemaGetPayload<S['select'][P]> :  P extends keyof Attestation ? Attestation[P] : never
  } 
      : Attestation


  type AttestationCountArgs = 
    Omit<AttestationFindManyArgs, 'select' | 'include'> & {
      select?: AttestationCountAggregateInputType | true
    }

  export interface AttestationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Attestation that matches the filter.
     * @param {AttestationFindUniqueArgs} args - Arguments to find a Attestation
     * @example
     * // Get one Attestation
     * const attestation = await prisma.attestation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AttestationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AttestationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Attestation'> extends True ? Prisma__AttestationClient<AttestationGetPayload<T>> : Prisma__AttestationClient<AttestationGetPayload<T> | null, null>

    /**
     * Find one Attestation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AttestationFindUniqueOrThrowArgs} args - Arguments to find a Attestation
     * @example
     * // Get one Attestation
     * const attestation = await prisma.attestation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AttestationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AttestationFindUniqueOrThrowArgs>
    ): Prisma__AttestationClient<AttestationGetPayload<T>>

    /**
     * Find the first Attestation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttestationFindFirstArgs} args - Arguments to find a Attestation
     * @example
     * // Get one Attestation
     * const attestation = await prisma.attestation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AttestationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AttestationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Attestation'> extends True ? Prisma__AttestationClient<AttestationGetPayload<T>> : Prisma__AttestationClient<AttestationGetPayload<T> | null, null>

    /**
     * Find the first Attestation that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttestationFindFirstOrThrowArgs} args - Arguments to find a Attestation
     * @example
     * // Get one Attestation
     * const attestation = await prisma.attestation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AttestationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AttestationFindFirstOrThrowArgs>
    ): Prisma__AttestationClient<AttestationGetPayload<T>>

    /**
     * Find zero or more Attestations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttestationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attestations
     * const attestations = await prisma.attestation.findMany()
     * 
     * // Get first 10 Attestations
     * const attestations = await prisma.attestation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attestationWithIdOnly = await prisma.attestation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AttestationFindManyArgs>(
      args?: SelectSubset<T, AttestationFindManyArgs>
    ): Prisma.PrismaPromise<Array<AttestationGetPayload<T>>>

    /**
     * Create a Attestation.
     * @param {AttestationCreateArgs} args - Arguments to create a Attestation.
     * @example
     * // Create one Attestation
     * const Attestation = await prisma.attestation.create({
     *   data: {
     *     // ... data to create a Attestation
     *   }
     * })
     * 
    **/
    create<T extends AttestationCreateArgs>(
      args: SelectSubset<T, AttestationCreateArgs>
    ): Prisma__AttestationClient<AttestationGetPayload<T>>

    /**
     * Create many Attestations.
     *     @param {AttestationCreateManyArgs} args - Arguments to create many Attestations.
     *     @example
     *     // Create many Attestations
     *     const attestation = await prisma.attestation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AttestationCreateManyArgs>(
      args?: SelectSubset<T, AttestationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Attestation.
     * @param {AttestationDeleteArgs} args - Arguments to delete one Attestation.
     * @example
     * // Delete one Attestation
     * const Attestation = await prisma.attestation.delete({
     *   where: {
     *     // ... filter to delete one Attestation
     *   }
     * })
     * 
    **/
    delete<T extends AttestationDeleteArgs>(
      args: SelectSubset<T, AttestationDeleteArgs>
    ): Prisma__AttestationClient<AttestationGetPayload<T>>

    /**
     * Update one Attestation.
     * @param {AttestationUpdateArgs} args - Arguments to update one Attestation.
     * @example
     * // Update one Attestation
     * const attestation = await prisma.attestation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AttestationUpdateArgs>(
      args: SelectSubset<T, AttestationUpdateArgs>
    ): Prisma__AttestationClient<AttestationGetPayload<T>>

    /**
     * Delete zero or more Attestations.
     * @param {AttestationDeleteManyArgs} args - Arguments to filter Attestations to delete.
     * @example
     * // Delete a few Attestations
     * const { count } = await prisma.attestation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AttestationDeleteManyArgs>(
      args?: SelectSubset<T, AttestationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attestations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttestationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attestations
     * const attestation = await prisma.attestation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AttestationUpdateManyArgs>(
      args: SelectSubset<T, AttestationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attestation.
     * @param {AttestationUpsertArgs} args - Arguments to update or create a Attestation.
     * @example
     * // Update or create a Attestation
     * const attestation = await prisma.attestation.upsert({
     *   create: {
     *     // ... data to create a Attestation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attestation we want to update
     *   }
     * })
    **/
    upsert<T extends AttestationUpsertArgs>(
      args: SelectSubset<T, AttestationUpsertArgs>
    ): Prisma__AttestationClient<AttestationGetPayload<T>>

    /**
     * Count the number of Attestations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttestationCountArgs} args - Arguments to filter Attestations to count.
     * @example
     * // Count the number of Attestations
     * const count = await prisma.attestation.count({
     *   where: {
     *     // ... the filter for the Attestations we want to count
     *   }
     * })
    **/
    count<T extends AttestationCountArgs>(
      args?: Subset<T, AttestationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttestationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attestation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttestationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttestationAggregateArgs>(args: Subset<T, AttestationAggregateArgs>): Prisma.PrismaPromise<GetAttestationAggregateType<T>>

    /**
     * Group by Attestation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttestationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttestationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttestationGroupByArgs['orderBy'] }
        : { orderBy?: AttestationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttestationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttestationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Attestation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AttestationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    schema<T extends SchemaArgs= {}>(args?: Subset<T, SchemaArgs>): Prisma__SchemaClient<SchemaGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Attestation base type for findUnique actions
   */
  export type AttestationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Attestation
     */
    select?: AttestationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttestationInclude | null
    /**
     * Filter, which Attestation to fetch.
     */
    where: AttestationWhereUniqueInput
  }

  /**
   * Attestation findUnique
   */
  export interface AttestationFindUniqueArgs extends AttestationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Attestation findUniqueOrThrow
   */
  export type AttestationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Attestation
     */
    select?: AttestationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttestationInclude | null
    /**
     * Filter, which Attestation to fetch.
     */
    where: AttestationWhereUniqueInput
  }


  /**
   * Attestation base type for findFirst actions
   */
  export type AttestationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Attestation
     */
    select?: AttestationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttestationInclude | null
    /**
     * Filter, which Attestation to fetch.
     */
    where?: AttestationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attestations to fetch.
     */
    orderBy?: Enumerable<AttestationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attestations.
     */
    cursor?: AttestationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attestations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attestations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attestations.
     */
    distinct?: Enumerable<AttestationScalarFieldEnum>
  }

  /**
   * Attestation findFirst
   */
  export interface AttestationFindFirstArgs extends AttestationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Attestation findFirstOrThrow
   */
  export type AttestationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Attestation
     */
    select?: AttestationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttestationInclude | null
    /**
     * Filter, which Attestation to fetch.
     */
    where?: AttestationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attestations to fetch.
     */
    orderBy?: Enumerable<AttestationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attestations.
     */
    cursor?: AttestationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attestations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attestations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attestations.
     */
    distinct?: Enumerable<AttestationScalarFieldEnum>
  }


  /**
   * Attestation findMany
   */
  export type AttestationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Attestation
     */
    select?: AttestationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttestationInclude | null
    /**
     * Filter, which Attestations to fetch.
     */
    where?: AttestationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attestations to fetch.
     */
    orderBy?: Enumerable<AttestationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attestations.
     */
    cursor?: AttestationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attestations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attestations.
     */
    skip?: number
    distinct?: Enumerable<AttestationScalarFieldEnum>
  }


  /**
   * Attestation create
   */
  export type AttestationCreateArgs = {
    /**
     * Select specific fields to fetch from the Attestation
     */
    select?: AttestationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttestationInclude | null
    /**
     * The data needed to create a Attestation.
     */
    data: XOR<AttestationCreateInput, AttestationUncheckedCreateInput>
  }


  /**
   * Attestation createMany
   */
  export type AttestationCreateManyArgs = {
    /**
     * The data used to create many Attestations.
     */
    data: Enumerable<AttestationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Attestation update
   */
  export type AttestationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Attestation
     */
    select?: AttestationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttestationInclude | null
    /**
     * The data needed to update a Attestation.
     */
    data: XOR<AttestationUpdateInput, AttestationUncheckedUpdateInput>
    /**
     * Choose, which Attestation to update.
     */
    where: AttestationWhereUniqueInput
  }


  /**
   * Attestation updateMany
   */
  export type AttestationUpdateManyArgs = {
    /**
     * The data used to update Attestations.
     */
    data: XOR<AttestationUpdateManyMutationInput, AttestationUncheckedUpdateManyInput>
    /**
     * Filter which Attestations to update
     */
    where?: AttestationWhereInput
  }


  /**
   * Attestation upsert
   */
  export type AttestationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Attestation
     */
    select?: AttestationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttestationInclude | null
    /**
     * The filter to search for the Attestation to update in case it exists.
     */
    where: AttestationWhereUniqueInput
    /**
     * In case the Attestation found by the `where` argument doesn't exist, create a new Attestation with this data.
     */
    create: XOR<AttestationCreateInput, AttestationUncheckedCreateInput>
    /**
     * In case the Attestation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttestationUpdateInput, AttestationUncheckedUpdateInput>
  }


  /**
   * Attestation delete
   */
  export type AttestationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Attestation
     */
    select?: AttestationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttestationInclude | null
    /**
     * Filter which Attestation to delete.
     */
    where: AttestationWhereUniqueInput
  }


  /**
   * Attestation deleteMany
   */
  export type AttestationDeleteManyArgs = {
    /**
     * Filter which Attestations to delete
     */
    where?: AttestationWhereInput
  }


  /**
   * Attestation without action
   */
  export type AttestationArgs = {
    /**
     * Select specific fields to fetch from the Attestation
     */
    select?: AttestationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttestationInclude | null
  }



  /**
   * Model SchemaName
   */


  export type AggregateSchemaName = {
    _count: SchemaNameCountAggregateOutputType | null
    _avg: SchemaNameAvgAggregateOutputType | null
    _sum: SchemaNameSumAggregateOutputType | null
    _min: SchemaNameMinAggregateOutputType | null
    _max: SchemaNameMaxAggregateOutputType | null
  }

  export type SchemaNameAvgAggregateOutputType = {
    time: number | null
  }

  export type SchemaNameSumAggregateOutputType = {
    time: number | null
  }

  export type SchemaNameMinAggregateOutputType = {
    id: string | null
    schemaId: string | null
    attesterAddress: string | null
    name: string | null
    time: number | null
    isCreator: boolean | null
  }

  export type SchemaNameMaxAggregateOutputType = {
    id: string | null
    schemaId: string | null
    attesterAddress: string | null
    name: string | null
    time: number | null
    isCreator: boolean | null
  }

  export type SchemaNameCountAggregateOutputType = {
    id: number
    schemaId: number
    attesterAddress: number
    name: number
    time: number
    isCreator: number
    _all: number
  }


  export type SchemaNameAvgAggregateInputType = {
    time?: true
  }

  export type SchemaNameSumAggregateInputType = {
    time?: true
  }

  export type SchemaNameMinAggregateInputType = {
    id?: true
    schemaId?: true
    attesterAddress?: true
    name?: true
    time?: true
    isCreator?: true
  }

  export type SchemaNameMaxAggregateInputType = {
    id?: true
    schemaId?: true
    attesterAddress?: true
    name?: true
    time?: true
    isCreator?: true
  }

  export type SchemaNameCountAggregateInputType = {
    id?: true
    schemaId?: true
    attesterAddress?: true
    name?: true
    time?: true
    isCreator?: true
    _all?: true
  }

  export type SchemaNameAggregateArgs = {
    /**
     * Filter which SchemaName to aggregate.
     */
    where?: SchemaNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchemaNames to fetch.
     */
    orderBy?: Enumerable<SchemaNameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchemaNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchemaNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchemaNames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SchemaNames
    **/
    _count?: true | SchemaNameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchemaNameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchemaNameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchemaNameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchemaNameMaxAggregateInputType
  }

  export type GetSchemaNameAggregateType<T extends SchemaNameAggregateArgs> = {
        [P in keyof T & keyof AggregateSchemaName]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchemaName[P]>
      : GetScalarType<T[P], AggregateSchemaName[P]>
  }




  export type SchemaNameGroupByArgs = {
    where?: SchemaNameWhereInput
    orderBy?: Enumerable<SchemaNameOrderByWithAggregationInput>
    by: SchemaNameScalarFieldEnum[]
    having?: SchemaNameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchemaNameCountAggregateInputType | true
    _avg?: SchemaNameAvgAggregateInputType
    _sum?: SchemaNameSumAggregateInputType
    _min?: SchemaNameMinAggregateInputType
    _max?: SchemaNameMaxAggregateInputType
  }


  export type SchemaNameGroupByOutputType = {
    id: string
    schemaId: string
    attesterAddress: string
    name: string
    time: number
    isCreator: boolean
    _count: SchemaNameCountAggregateOutputType | null
    _avg: SchemaNameAvgAggregateOutputType | null
    _sum: SchemaNameSumAggregateOutputType | null
    _min: SchemaNameMinAggregateOutputType | null
    _max: SchemaNameMaxAggregateOutputType | null
  }

  type GetSchemaNameGroupByPayload<T extends SchemaNameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SchemaNameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchemaNameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchemaNameGroupByOutputType[P]>
            : GetScalarType<T[P], SchemaNameGroupByOutputType[P]>
        }
      >
    >


  export type SchemaNameSelect = {
    id?: boolean
    schemaId?: boolean
    attesterAddress?: boolean
    name?: boolean
    time?: boolean
    isCreator?: boolean
    schema?: boolean | SchemaArgs
  }


  export type SchemaNameInclude = {
    schema?: boolean | SchemaArgs
  }

  export type SchemaNameGetPayload<S extends boolean | null | undefined | SchemaNameArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SchemaName :
    S extends undefined ? never :
    S extends { include: any } & (SchemaNameArgs | SchemaNameFindManyArgs)
    ? SchemaName  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'schema' ? SchemaGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SchemaNameArgs | SchemaNameFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'schema' ? SchemaGetPayload<S['select'][P]> :  P extends keyof SchemaName ? SchemaName[P] : never
  } 
      : SchemaName


  type SchemaNameCountArgs = 
    Omit<SchemaNameFindManyArgs, 'select' | 'include'> & {
      select?: SchemaNameCountAggregateInputType | true
    }

  export interface SchemaNameDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one SchemaName that matches the filter.
     * @param {SchemaNameFindUniqueArgs} args - Arguments to find a SchemaName
     * @example
     * // Get one SchemaName
     * const schemaName = await prisma.schemaName.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SchemaNameFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SchemaNameFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SchemaName'> extends True ? Prisma__SchemaNameClient<SchemaNameGetPayload<T>> : Prisma__SchemaNameClient<SchemaNameGetPayload<T> | null, null>

    /**
     * Find one SchemaName that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SchemaNameFindUniqueOrThrowArgs} args - Arguments to find a SchemaName
     * @example
     * // Get one SchemaName
     * const schemaName = await prisma.schemaName.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SchemaNameFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SchemaNameFindUniqueOrThrowArgs>
    ): Prisma__SchemaNameClient<SchemaNameGetPayload<T>>

    /**
     * Find the first SchemaName that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaNameFindFirstArgs} args - Arguments to find a SchemaName
     * @example
     * // Get one SchemaName
     * const schemaName = await prisma.schemaName.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SchemaNameFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SchemaNameFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SchemaName'> extends True ? Prisma__SchemaNameClient<SchemaNameGetPayload<T>> : Prisma__SchemaNameClient<SchemaNameGetPayload<T> | null, null>

    /**
     * Find the first SchemaName that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaNameFindFirstOrThrowArgs} args - Arguments to find a SchemaName
     * @example
     * // Get one SchemaName
     * const schemaName = await prisma.schemaName.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SchemaNameFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SchemaNameFindFirstOrThrowArgs>
    ): Prisma__SchemaNameClient<SchemaNameGetPayload<T>>

    /**
     * Find zero or more SchemaNames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaNameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SchemaNames
     * const schemaNames = await prisma.schemaName.findMany()
     * 
     * // Get first 10 SchemaNames
     * const schemaNames = await prisma.schemaName.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schemaNameWithIdOnly = await prisma.schemaName.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SchemaNameFindManyArgs>(
      args?: SelectSubset<T, SchemaNameFindManyArgs>
    ): Prisma.PrismaPromise<Array<SchemaNameGetPayload<T>>>

    /**
     * Create a SchemaName.
     * @param {SchemaNameCreateArgs} args - Arguments to create a SchemaName.
     * @example
     * // Create one SchemaName
     * const SchemaName = await prisma.schemaName.create({
     *   data: {
     *     // ... data to create a SchemaName
     *   }
     * })
     * 
    **/
    create<T extends SchemaNameCreateArgs>(
      args: SelectSubset<T, SchemaNameCreateArgs>
    ): Prisma__SchemaNameClient<SchemaNameGetPayload<T>>

    /**
     * Create many SchemaNames.
     *     @param {SchemaNameCreateManyArgs} args - Arguments to create many SchemaNames.
     *     @example
     *     // Create many SchemaNames
     *     const schemaName = await prisma.schemaName.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SchemaNameCreateManyArgs>(
      args?: SelectSubset<T, SchemaNameCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SchemaName.
     * @param {SchemaNameDeleteArgs} args - Arguments to delete one SchemaName.
     * @example
     * // Delete one SchemaName
     * const SchemaName = await prisma.schemaName.delete({
     *   where: {
     *     // ... filter to delete one SchemaName
     *   }
     * })
     * 
    **/
    delete<T extends SchemaNameDeleteArgs>(
      args: SelectSubset<T, SchemaNameDeleteArgs>
    ): Prisma__SchemaNameClient<SchemaNameGetPayload<T>>

    /**
     * Update one SchemaName.
     * @param {SchemaNameUpdateArgs} args - Arguments to update one SchemaName.
     * @example
     * // Update one SchemaName
     * const schemaName = await prisma.schemaName.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SchemaNameUpdateArgs>(
      args: SelectSubset<T, SchemaNameUpdateArgs>
    ): Prisma__SchemaNameClient<SchemaNameGetPayload<T>>

    /**
     * Delete zero or more SchemaNames.
     * @param {SchemaNameDeleteManyArgs} args - Arguments to filter SchemaNames to delete.
     * @example
     * // Delete a few SchemaNames
     * const { count } = await prisma.schemaName.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SchemaNameDeleteManyArgs>(
      args?: SelectSubset<T, SchemaNameDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchemaNames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaNameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SchemaNames
     * const schemaName = await prisma.schemaName.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SchemaNameUpdateManyArgs>(
      args: SelectSubset<T, SchemaNameUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SchemaName.
     * @param {SchemaNameUpsertArgs} args - Arguments to update or create a SchemaName.
     * @example
     * // Update or create a SchemaName
     * const schemaName = await prisma.schemaName.upsert({
     *   create: {
     *     // ... data to create a SchemaName
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SchemaName we want to update
     *   }
     * })
    **/
    upsert<T extends SchemaNameUpsertArgs>(
      args: SelectSubset<T, SchemaNameUpsertArgs>
    ): Prisma__SchemaNameClient<SchemaNameGetPayload<T>>

    /**
     * Count the number of SchemaNames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaNameCountArgs} args - Arguments to filter SchemaNames to count.
     * @example
     * // Count the number of SchemaNames
     * const count = await prisma.schemaName.count({
     *   where: {
     *     // ... the filter for the SchemaNames we want to count
     *   }
     * })
    **/
    count<T extends SchemaNameCountArgs>(
      args?: Subset<T, SchemaNameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchemaNameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SchemaName.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaNameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchemaNameAggregateArgs>(args: Subset<T, SchemaNameAggregateArgs>): Prisma.PrismaPromise<GetSchemaNameAggregateType<T>>

    /**
     * Group by SchemaName.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemaNameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchemaNameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchemaNameGroupByArgs['orderBy'] }
        : { orderBy?: SchemaNameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchemaNameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchemaNameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SchemaName.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SchemaNameClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    schema<T extends SchemaArgs= {}>(args?: Subset<T, SchemaArgs>): Prisma__SchemaClient<SchemaGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SchemaName base type for findUnique actions
   */
  export type SchemaNameFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SchemaName
     */
    select?: SchemaNameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaNameInclude | null
    /**
     * Filter, which SchemaName to fetch.
     */
    where: SchemaNameWhereUniqueInput
  }

  /**
   * SchemaName findUnique
   */
  export interface SchemaNameFindUniqueArgs extends SchemaNameFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SchemaName findUniqueOrThrow
   */
  export type SchemaNameFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SchemaName
     */
    select?: SchemaNameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaNameInclude | null
    /**
     * Filter, which SchemaName to fetch.
     */
    where: SchemaNameWhereUniqueInput
  }


  /**
   * SchemaName base type for findFirst actions
   */
  export type SchemaNameFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SchemaName
     */
    select?: SchemaNameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaNameInclude | null
    /**
     * Filter, which SchemaName to fetch.
     */
    where?: SchemaNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchemaNames to fetch.
     */
    orderBy?: Enumerable<SchemaNameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchemaNames.
     */
    cursor?: SchemaNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchemaNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchemaNames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchemaNames.
     */
    distinct?: Enumerable<SchemaNameScalarFieldEnum>
  }

  /**
   * SchemaName findFirst
   */
  export interface SchemaNameFindFirstArgs extends SchemaNameFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SchemaName findFirstOrThrow
   */
  export type SchemaNameFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SchemaName
     */
    select?: SchemaNameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaNameInclude | null
    /**
     * Filter, which SchemaName to fetch.
     */
    where?: SchemaNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchemaNames to fetch.
     */
    orderBy?: Enumerable<SchemaNameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchemaNames.
     */
    cursor?: SchemaNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchemaNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchemaNames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchemaNames.
     */
    distinct?: Enumerable<SchemaNameScalarFieldEnum>
  }


  /**
   * SchemaName findMany
   */
  export type SchemaNameFindManyArgs = {
    /**
     * Select specific fields to fetch from the SchemaName
     */
    select?: SchemaNameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaNameInclude | null
    /**
     * Filter, which SchemaNames to fetch.
     */
    where?: SchemaNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchemaNames to fetch.
     */
    orderBy?: Enumerable<SchemaNameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SchemaNames.
     */
    cursor?: SchemaNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchemaNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchemaNames.
     */
    skip?: number
    distinct?: Enumerable<SchemaNameScalarFieldEnum>
  }


  /**
   * SchemaName create
   */
  export type SchemaNameCreateArgs = {
    /**
     * Select specific fields to fetch from the SchemaName
     */
    select?: SchemaNameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaNameInclude | null
    /**
     * The data needed to create a SchemaName.
     */
    data: XOR<SchemaNameCreateInput, SchemaNameUncheckedCreateInput>
  }


  /**
   * SchemaName createMany
   */
  export type SchemaNameCreateManyArgs = {
    /**
     * The data used to create many SchemaNames.
     */
    data: Enumerable<SchemaNameCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SchemaName update
   */
  export type SchemaNameUpdateArgs = {
    /**
     * Select specific fields to fetch from the SchemaName
     */
    select?: SchemaNameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaNameInclude | null
    /**
     * The data needed to update a SchemaName.
     */
    data: XOR<SchemaNameUpdateInput, SchemaNameUncheckedUpdateInput>
    /**
     * Choose, which SchemaName to update.
     */
    where: SchemaNameWhereUniqueInput
  }


  /**
   * SchemaName updateMany
   */
  export type SchemaNameUpdateManyArgs = {
    /**
     * The data used to update SchemaNames.
     */
    data: XOR<SchemaNameUpdateManyMutationInput, SchemaNameUncheckedUpdateManyInput>
    /**
     * Filter which SchemaNames to update
     */
    where?: SchemaNameWhereInput
  }


  /**
   * SchemaName upsert
   */
  export type SchemaNameUpsertArgs = {
    /**
     * Select specific fields to fetch from the SchemaName
     */
    select?: SchemaNameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaNameInclude | null
    /**
     * The filter to search for the SchemaName to update in case it exists.
     */
    where: SchemaNameWhereUniqueInput
    /**
     * In case the SchemaName found by the `where` argument doesn't exist, create a new SchemaName with this data.
     */
    create: XOR<SchemaNameCreateInput, SchemaNameUncheckedCreateInput>
    /**
     * In case the SchemaName was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchemaNameUpdateInput, SchemaNameUncheckedUpdateInput>
  }


  /**
   * SchemaName delete
   */
  export type SchemaNameDeleteArgs = {
    /**
     * Select specific fields to fetch from the SchemaName
     */
    select?: SchemaNameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaNameInclude | null
    /**
     * Filter which SchemaName to delete.
     */
    where: SchemaNameWhereUniqueInput
  }


  /**
   * SchemaName deleteMany
   */
  export type SchemaNameDeleteManyArgs = {
    /**
     * Filter which SchemaNames to delete
     */
    where?: SchemaNameWhereInput
  }


  /**
   * SchemaName without action
   */
  export type SchemaNameArgs = {
    /**
     * Select specific fields to fetch from the SchemaName
     */
    select?: SchemaNameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchemaNameInclude | null
  }



  /**
   * Model Timestamp
   */


  export type AggregateTimestamp = {
    _count: TimestampCountAggregateOutputType | null
    _avg: TimestampAvgAggregateOutputType | null
    _sum: TimestampSumAggregateOutputType | null
    _min: TimestampMinAggregateOutputType | null
    _max: TimestampMaxAggregateOutputType | null
  }

  export type TimestampAvgAggregateOutputType = {
    timestamp: number | null
  }

  export type TimestampSumAggregateOutputType = {
    timestamp: number | null
  }

  export type TimestampMinAggregateOutputType = {
    id: string | null
    from: string | null
    txid: string | null
    tree: string | null
    timestamp: number | null
  }

  export type TimestampMaxAggregateOutputType = {
    id: string | null
    from: string | null
    txid: string | null
    tree: string | null
    timestamp: number | null
  }

  export type TimestampCountAggregateOutputType = {
    id: number
    from: number
    txid: number
    tree: number
    timestamp: number
    _all: number
  }


  export type TimestampAvgAggregateInputType = {
    timestamp?: true
  }

  export type TimestampSumAggregateInputType = {
    timestamp?: true
  }

  export type TimestampMinAggregateInputType = {
    id?: true
    from?: true
    txid?: true
    tree?: true
    timestamp?: true
  }

  export type TimestampMaxAggregateInputType = {
    id?: true
    from?: true
    txid?: true
    tree?: true
    timestamp?: true
  }

  export type TimestampCountAggregateInputType = {
    id?: true
    from?: true
    txid?: true
    tree?: true
    timestamp?: true
    _all?: true
  }

  export type TimestampAggregateArgs = {
    /**
     * Filter which Timestamp to aggregate.
     */
    where?: TimestampWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Timestamps to fetch.
     */
    orderBy?: Enumerable<TimestampOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimestampWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Timestamps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Timestamps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Timestamps
    **/
    _count?: true | TimestampCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TimestampAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TimestampSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimestampMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimestampMaxAggregateInputType
  }

  export type GetTimestampAggregateType<T extends TimestampAggregateArgs> = {
        [P in keyof T & keyof AggregateTimestamp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimestamp[P]>
      : GetScalarType<T[P], AggregateTimestamp[P]>
  }




  export type TimestampGroupByArgs = {
    where?: TimestampWhereInput
    orderBy?: Enumerable<TimestampOrderByWithAggregationInput>
    by: TimestampScalarFieldEnum[]
    having?: TimestampScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimestampCountAggregateInputType | true
    _avg?: TimestampAvgAggregateInputType
    _sum?: TimestampSumAggregateInputType
    _min?: TimestampMinAggregateInputType
    _max?: TimestampMaxAggregateInputType
  }


  export type TimestampGroupByOutputType = {
    id: string
    from: string
    txid: string
    tree: string
    timestamp: number
    _count: TimestampCountAggregateOutputType | null
    _avg: TimestampAvgAggregateOutputType | null
    _sum: TimestampSumAggregateOutputType | null
    _min: TimestampMinAggregateOutputType | null
    _max: TimestampMaxAggregateOutputType | null
  }

  type GetTimestampGroupByPayload<T extends TimestampGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TimestampGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimestampGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimestampGroupByOutputType[P]>
            : GetScalarType<T[P], TimestampGroupByOutputType[P]>
        }
      >
    >


  export type TimestampSelect = {
    id?: boolean
    from?: boolean
    txid?: boolean
    tree?: boolean
    timestamp?: boolean
  }


  export type TimestampGetPayload<S extends boolean | null | undefined | TimestampArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Timestamp :
    S extends undefined ? never :
    S extends { include: any } & (TimestampArgs | TimestampFindManyArgs)
    ? Timestamp 
    : S extends { select: any } & (TimestampArgs | TimestampFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Timestamp ? Timestamp[P] : never
  } 
      : Timestamp


  type TimestampCountArgs = 
    Omit<TimestampFindManyArgs, 'select' | 'include'> & {
      select?: TimestampCountAggregateInputType | true
    }

  export interface TimestampDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Timestamp that matches the filter.
     * @param {TimestampFindUniqueArgs} args - Arguments to find a Timestamp
     * @example
     * // Get one Timestamp
     * const timestamp = await prisma.timestamp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TimestampFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TimestampFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Timestamp'> extends True ? Prisma__TimestampClient<TimestampGetPayload<T>> : Prisma__TimestampClient<TimestampGetPayload<T> | null, null>

    /**
     * Find one Timestamp that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TimestampFindUniqueOrThrowArgs} args - Arguments to find a Timestamp
     * @example
     * // Get one Timestamp
     * const timestamp = await prisma.timestamp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TimestampFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TimestampFindUniqueOrThrowArgs>
    ): Prisma__TimestampClient<TimestampGetPayload<T>>

    /**
     * Find the first Timestamp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimestampFindFirstArgs} args - Arguments to find a Timestamp
     * @example
     * // Get one Timestamp
     * const timestamp = await prisma.timestamp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TimestampFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TimestampFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Timestamp'> extends True ? Prisma__TimestampClient<TimestampGetPayload<T>> : Prisma__TimestampClient<TimestampGetPayload<T> | null, null>

    /**
     * Find the first Timestamp that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimestampFindFirstOrThrowArgs} args - Arguments to find a Timestamp
     * @example
     * // Get one Timestamp
     * const timestamp = await prisma.timestamp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TimestampFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TimestampFindFirstOrThrowArgs>
    ): Prisma__TimestampClient<TimestampGetPayload<T>>

    /**
     * Find zero or more Timestamps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimestampFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Timestamps
     * const timestamps = await prisma.timestamp.findMany()
     * 
     * // Get first 10 Timestamps
     * const timestamps = await prisma.timestamp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timestampWithIdOnly = await prisma.timestamp.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TimestampFindManyArgs>(
      args?: SelectSubset<T, TimestampFindManyArgs>
    ): Prisma.PrismaPromise<Array<TimestampGetPayload<T>>>

    /**
     * Create a Timestamp.
     * @param {TimestampCreateArgs} args - Arguments to create a Timestamp.
     * @example
     * // Create one Timestamp
     * const Timestamp = await prisma.timestamp.create({
     *   data: {
     *     // ... data to create a Timestamp
     *   }
     * })
     * 
    **/
    create<T extends TimestampCreateArgs>(
      args: SelectSubset<T, TimestampCreateArgs>
    ): Prisma__TimestampClient<TimestampGetPayload<T>>

    /**
     * Create many Timestamps.
     *     @param {TimestampCreateManyArgs} args - Arguments to create many Timestamps.
     *     @example
     *     // Create many Timestamps
     *     const timestamp = await prisma.timestamp.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TimestampCreateManyArgs>(
      args?: SelectSubset<T, TimestampCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Timestamp.
     * @param {TimestampDeleteArgs} args - Arguments to delete one Timestamp.
     * @example
     * // Delete one Timestamp
     * const Timestamp = await prisma.timestamp.delete({
     *   where: {
     *     // ... filter to delete one Timestamp
     *   }
     * })
     * 
    **/
    delete<T extends TimestampDeleteArgs>(
      args: SelectSubset<T, TimestampDeleteArgs>
    ): Prisma__TimestampClient<TimestampGetPayload<T>>

    /**
     * Update one Timestamp.
     * @param {TimestampUpdateArgs} args - Arguments to update one Timestamp.
     * @example
     * // Update one Timestamp
     * const timestamp = await prisma.timestamp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TimestampUpdateArgs>(
      args: SelectSubset<T, TimestampUpdateArgs>
    ): Prisma__TimestampClient<TimestampGetPayload<T>>

    /**
     * Delete zero or more Timestamps.
     * @param {TimestampDeleteManyArgs} args - Arguments to filter Timestamps to delete.
     * @example
     * // Delete a few Timestamps
     * const { count } = await prisma.timestamp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TimestampDeleteManyArgs>(
      args?: SelectSubset<T, TimestampDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Timestamps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimestampUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Timestamps
     * const timestamp = await prisma.timestamp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TimestampUpdateManyArgs>(
      args: SelectSubset<T, TimestampUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Timestamp.
     * @param {TimestampUpsertArgs} args - Arguments to update or create a Timestamp.
     * @example
     * // Update or create a Timestamp
     * const timestamp = await prisma.timestamp.upsert({
     *   create: {
     *     // ... data to create a Timestamp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Timestamp we want to update
     *   }
     * })
    **/
    upsert<T extends TimestampUpsertArgs>(
      args: SelectSubset<T, TimestampUpsertArgs>
    ): Prisma__TimestampClient<TimestampGetPayload<T>>

    /**
     * Count the number of Timestamps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimestampCountArgs} args - Arguments to filter Timestamps to count.
     * @example
     * // Count the number of Timestamps
     * const count = await prisma.timestamp.count({
     *   where: {
     *     // ... the filter for the Timestamps we want to count
     *   }
     * })
    **/
    count<T extends TimestampCountArgs>(
      args?: Subset<T, TimestampCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimestampCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Timestamp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimestampAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimestampAggregateArgs>(args: Subset<T, TimestampAggregateArgs>): Prisma.PrismaPromise<GetTimestampAggregateType<T>>

    /**
     * Group by Timestamp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimestampGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimestampGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimestampGroupByArgs['orderBy'] }
        : { orderBy?: TimestampGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimestampGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimestampGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Timestamp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TimestampClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Timestamp base type for findUnique actions
   */
  export type TimestampFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Timestamp
     */
    select?: TimestampSelect | null
    /**
     * Filter, which Timestamp to fetch.
     */
    where: TimestampWhereUniqueInput
  }

  /**
   * Timestamp findUnique
   */
  export interface TimestampFindUniqueArgs extends TimestampFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Timestamp findUniqueOrThrow
   */
  export type TimestampFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Timestamp
     */
    select?: TimestampSelect | null
    /**
     * Filter, which Timestamp to fetch.
     */
    where: TimestampWhereUniqueInput
  }


  /**
   * Timestamp base type for findFirst actions
   */
  export type TimestampFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Timestamp
     */
    select?: TimestampSelect | null
    /**
     * Filter, which Timestamp to fetch.
     */
    where?: TimestampWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Timestamps to fetch.
     */
    orderBy?: Enumerable<TimestampOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Timestamps.
     */
    cursor?: TimestampWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Timestamps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Timestamps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Timestamps.
     */
    distinct?: Enumerable<TimestampScalarFieldEnum>
  }

  /**
   * Timestamp findFirst
   */
  export interface TimestampFindFirstArgs extends TimestampFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Timestamp findFirstOrThrow
   */
  export type TimestampFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Timestamp
     */
    select?: TimestampSelect | null
    /**
     * Filter, which Timestamp to fetch.
     */
    where?: TimestampWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Timestamps to fetch.
     */
    orderBy?: Enumerable<TimestampOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Timestamps.
     */
    cursor?: TimestampWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Timestamps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Timestamps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Timestamps.
     */
    distinct?: Enumerable<TimestampScalarFieldEnum>
  }


  /**
   * Timestamp findMany
   */
  export type TimestampFindManyArgs = {
    /**
     * Select specific fields to fetch from the Timestamp
     */
    select?: TimestampSelect | null
    /**
     * Filter, which Timestamps to fetch.
     */
    where?: TimestampWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Timestamps to fetch.
     */
    orderBy?: Enumerable<TimestampOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Timestamps.
     */
    cursor?: TimestampWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Timestamps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Timestamps.
     */
    skip?: number
    distinct?: Enumerable<TimestampScalarFieldEnum>
  }


  /**
   * Timestamp create
   */
  export type TimestampCreateArgs = {
    /**
     * Select specific fields to fetch from the Timestamp
     */
    select?: TimestampSelect | null
    /**
     * The data needed to create a Timestamp.
     */
    data: XOR<TimestampCreateInput, TimestampUncheckedCreateInput>
  }


  /**
   * Timestamp createMany
   */
  export type TimestampCreateManyArgs = {
    /**
     * The data used to create many Timestamps.
     */
    data: Enumerable<TimestampCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Timestamp update
   */
  export type TimestampUpdateArgs = {
    /**
     * Select specific fields to fetch from the Timestamp
     */
    select?: TimestampSelect | null
    /**
     * The data needed to update a Timestamp.
     */
    data: XOR<TimestampUpdateInput, TimestampUncheckedUpdateInput>
    /**
     * Choose, which Timestamp to update.
     */
    where: TimestampWhereUniqueInput
  }


  /**
   * Timestamp updateMany
   */
  export type TimestampUpdateManyArgs = {
    /**
     * The data used to update Timestamps.
     */
    data: XOR<TimestampUpdateManyMutationInput, TimestampUncheckedUpdateManyInput>
    /**
     * Filter which Timestamps to update
     */
    where?: TimestampWhereInput
  }


  /**
   * Timestamp upsert
   */
  export type TimestampUpsertArgs = {
    /**
     * Select specific fields to fetch from the Timestamp
     */
    select?: TimestampSelect | null
    /**
     * The filter to search for the Timestamp to update in case it exists.
     */
    where: TimestampWhereUniqueInput
    /**
     * In case the Timestamp found by the `where` argument doesn't exist, create a new Timestamp with this data.
     */
    create: XOR<TimestampCreateInput, TimestampUncheckedCreateInput>
    /**
     * In case the Timestamp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimestampUpdateInput, TimestampUncheckedUpdateInput>
  }


  /**
   * Timestamp delete
   */
  export type TimestampDeleteArgs = {
    /**
     * Select specific fields to fetch from the Timestamp
     */
    select?: TimestampSelect | null
    /**
     * Filter which Timestamp to delete.
     */
    where: TimestampWhereUniqueInput
  }


  /**
   * Timestamp deleteMany
   */
  export type TimestampDeleteManyArgs = {
    /**
     * Filter which Timestamps to delete
     */
    where?: TimestampWhereInput
  }


  /**
   * Timestamp without action
   */
  export type TimestampArgs = {
    /**
     * Select specific fields to fetch from the Timestamp
     */
    select?: TimestampSelect | null
  }



  /**
   * Model OffchainRevocation
   */


  export type AggregateOffchainRevocation = {
    _count: OffchainRevocationCountAggregateOutputType | null
    _avg: OffchainRevocationAvgAggregateOutputType | null
    _sum: OffchainRevocationSumAggregateOutputType | null
    _min: OffchainRevocationMinAggregateOutputType | null
    _max: OffchainRevocationMaxAggregateOutputType | null
  }

  export type OffchainRevocationAvgAggregateOutputType = {
    timestamp: number | null
  }

  export type OffchainRevocationSumAggregateOutputType = {
    timestamp: number | null
  }

  export type OffchainRevocationMinAggregateOutputType = {
    id: string | null
    from: string | null
    uid: string | null
    txid: string | null
    timestamp: number | null
  }

  export type OffchainRevocationMaxAggregateOutputType = {
    id: string | null
    from: string | null
    uid: string | null
    txid: string | null
    timestamp: number | null
  }

  export type OffchainRevocationCountAggregateOutputType = {
    id: number
    from: number
    uid: number
    txid: number
    timestamp: number
    _all: number
  }


  export type OffchainRevocationAvgAggregateInputType = {
    timestamp?: true
  }

  export type OffchainRevocationSumAggregateInputType = {
    timestamp?: true
  }

  export type OffchainRevocationMinAggregateInputType = {
    id?: true
    from?: true
    uid?: true
    txid?: true
    timestamp?: true
  }

  export type OffchainRevocationMaxAggregateInputType = {
    id?: true
    from?: true
    uid?: true
    txid?: true
    timestamp?: true
  }

  export type OffchainRevocationCountAggregateInputType = {
    id?: true
    from?: true
    uid?: true
    txid?: true
    timestamp?: true
    _all?: true
  }

  export type OffchainRevocationAggregateArgs = {
    /**
     * Filter which OffchainRevocation to aggregate.
     */
    where?: OffchainRevocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OffchainRevocations to fetch.
     */
    orderBy?: Enumerable<OffchainRevocationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OffchainRevocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OffchainRevocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OffchainRevocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OffchainRevocations
    **/
    _count?: true | OffchainRevocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OffchainRevocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OffchainRevocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OffchainRevocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OffchainRevocationMaxAggregateInputType
  }

  export type GetOffchainRevocationAggregateType<T extends OffchainRevocationAggregateArgs> = {
        [P in keyof T & keyof AggregateOffchainRevocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOffchainRevocation[P]>
      : GetScalarType<T[P], AggregateOffchainRevocation[P]>
  }




  export type OffchainRevocationGroupByArgs = {
    where?: OffchainRevocationWhereInput
    orderBy?: Enumerable<OffchainRevocationOrderByWithAggregationInput>
    by: OffchainRevocationScalarFieldEnum[]
    having?: OffchainRevocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OffchainRevocationCountAggregateInputType | true
    _avg?: OffchainRevocationAvgAggregateInputType
    _sum?: OffchainRevocationSumAggregateInputType
    _min?: OffchainRevocationMinAggregateInputType
    _max?: OffchainRevocationMaxAggregateInputType
  }


  export type OffchainRevocationGroupByOutputType = {
    id: string
    from: string
    uid: string
    txid: string
    timestamp: number
    _count: OffchainRevocationCountAggregateOutputType | null
    _avg: OffchainRevocationAvgAggregateOutputType | null
    _sum: OffchainRevocationSumAggregateOutputType | null
    _min: OffchainRevocationMinAggregateOutputType | null
    _max: OffchainRevocationMaxAggregateOutputType | null
  }

  type GetOffchainRevocationGroupByPayload<T extends OffchainRevocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OffchainRevocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OffchainRevocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OffchainRevocationGroupByOutputType[P]>
            : GetScalarType<T[P], OffchainRevocationGroupByOutputType[P]>
        }
      >
    >


  export type OffchainRevocationSelect = {
    id?: boolean
    from?: boolean
    uid?: boolean
    txid?: boolean
    timestamp?: boolean
  }


  export type OffchainRevocationGetPayload<S extends boolean | null | undefined | OffchainRevocationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? OffchainRevocation :
    S extends undefined ? never :
    S extends { include: any } & (OffchainRevocationArgs | OffchainRevocationFindManyArgs)
    ? OffchainRevocation 
    : S extends { select: any } & (OffchainRevocationArgs | OffchainRevocationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof OffchainRevocation ? OffchainRevocation[P] : never
  } 
      : OffchainRevocation


  type OffchainRevocationCountArgs = 
    Omit<OffchainRevocationFindManyArgs, 'select' | 'include'> & {
      select?: OffchainRevocationCountAggregateInputType | true
    }

  export interface OffchainRevocationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one OffchainRevocation that matches the filter.
     * @param {OffchainRevocationFindUniqueArgs} args - Arguments to find a OffchainRevocation
     * @example
     * // Get one OffchainRevocation
     * const offchainRevocation = await prisma.offchainRevocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OffchainRevocationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OffchainRevocationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OffchainRevocation'> extends True ? Prisma__OffchainRevocationClient<OffchainRevocationGetPayload<T>> : Prisma__OffchainRevocationClient<OffchainRevocationGetPayload<T> | null, null>

    /**
     * Find one OffchainRevocation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OffchainRevocationFindUniqueOrThrowArgs} args - Arguments to find a OffchainRevocation
     * @example
     * // Get one OffchainRevocation
     * const offchainRevocation = await prisma.offchainRevocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OffchainRevocationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OffchainRevocationFindUniqueOrThrowArgs>
    ): Prisma__OffchainRevocationClient<OffchainRevocationGetPayload<T>>

    /**
     * Find the first OffchainRevocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffchainRevocationFindFirstArgs} args - Arguments to find a OffchainRevocation
     * @example
     * // Get one OffchainRevocation
     * const offchainRevocation = await prisma.offchainRevocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OffchainRevocationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OffchainRevocationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OffchainRevocation'> extends True ? Prisma__OffchainRevocationClient<OffchainRevocationGetPayload<T>> : Prisma__OffchainRevocationClient<OffchainRevocationGetPayload<T> | null, null>

    /**
     * Find the first OffchainRevocation that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffchainRevocationFindFirstOrThrowArgs} args - Arguments to find a OffchainRevocation
     * @example
     * // Get one OffchainRevocation
     * const offchainRevocation = await prisma.offchainRevocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OffchainRevocationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OffchainRevocationFindFirstOrThrowArgs>
    ): Prisma__OffchainRevocationClient<OffchainRevocationGetPayload<T>>

    /**
     * Find zero or more OffchainRevocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffchainRevocationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OffchainRevocations
     * const offchainRevocations = await prisma.offchainRevocation.findMany()
     * 
     * // Get first 10 OffchainRevocations
     * const offchainRevocations = await prisma.offchainRevocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const offchainRevocationWithIdOnly = await prisma.offchainRevocation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OffchainRevocationFindManyArgs>(
      args?: SelectSubset<T, OffchainRevocationFindManyArgs>
    ): Prisma.PrismaPromise<Array<OffchainRevocationGetPayload<T>>>

    /**
     * Create a OffchainRevocation.
     * @param {OffchainRevocationCreateArgs} args - Arguments to create a OffchainRevocation.
     * @example
     * // Create one OffchainRevocation
     * const OffchainRevocation = await prisma.offchainRevocation.create({
     *   data: {
     *     // ... data to create a OffchainRevocation
     *   }
     * })
     * 
    **/
    create<T extends OffchainRevocationCreateArgs>(
      args: SelectSubset<T, OffchainRevocationCreateArgs>
    ): Prisma__OffchainRevocationClient<OffchainRevocationGetPayload<T>>

    /**
     * Create many OffchainRevocations.
     *     @param {OffchainRevocationCreateManyArgs} args - Arguments to create many OffchainRevocations.
     *     @example
     *     // Create many OffchainRevocations
     *     const offchainRevocation = await prisma.offchainRevocation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OffchainRevocationCreateManyArgs>(
      args?: SelectSubset<T, OffchainRevocationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OffchainRevocation.
     * @param {OffchainRevocationDeleteArgs} args - Arguments to delete one OffchainRevocation.
     * @example
     * // Delete one OffchainRevocation
     * const OffchainRevocation = await prisma.offchainRevocation.delete({
     *   where: {
     *     // ... filter to delete one OffchainRevocation
     *   }
     * })
     * 
    **/
    delete<T extends OffchainRevocationDeleteArgs>(
      args: SelectSubset<T, OffchainRevocationDeleteArgs>
    ): Prisma__OffchainRevocationClient<OffchainRevocationGetPayload<T>>

    /**
     * Update one OffchainRevocation.
     * @param {OffchainRevocationUpdateArgs} args - Arguments to update one OffchainRevocation.
     * @example
     * // Update one OffchainRevocation
     * const offchainRevocation = await prisma.offchainRevocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OffchainRevocationUpdateArgs>(
      args: SelectSubset<T, OffchainRevocationUpdateArgs>
    ): Prisma__OffchainRevocationClient<OffchainRevocationGetPayload<T>>

    /**
     * Delete zero or more OffchainRevocations.
     * @param {OffchainRevocationDeleteManyArgs} args - Arguments to filter OffchainRevocations to delete.
     * @example
     * // Delete a few OffchainRevocations
     * const { count } = await prisma.offchainRevocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OffchainRevocationDeleteManyArgs>(
      args?: SelectSubset<T, OffchainRevocationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OffchainRevocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffchainRevocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OffchainRevocations
     * const offchainRevocation = await prisma.offchainRevocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OffchainRevocationUpdateManyArgs>(
      args: SelectSubset<T, OffchainRevocationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OffchainRevocation.
     * @param {OffchainRevocationUpsertArgs} args - Arguments to update or create a OffchainRevocation.
     * @example
     * // Update or create a OffchainRevocation
     * const offchainRevocation = await prisma.offchainRevocation.upsert({
     *   create: {
     *     // ... data to create a OffchainRevocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OffchainRevocation we want to update
     *   }
     * })
    **/
    upsert<T extends OffchainRevocationUpsertArgs>(
      args: SelectSubset<T, OffchainRevocationUpsertArgs>
    ): Prisma__OffchainRevocationClient<OffchainRevocationGetPayload<T>>

    /**
     * Count the number of OffchainRevocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffchainRevocationCountArgs} args - Arguments to filter OffchainRevocations to count.
     * @example
     * // Count the number of OffchainRevocations
     * const count = await prisma.offchainRevocation.count({
     *   where: {
     *     // ... the filter for the OffchainRevocations we want to count
     *   }
     * })
    **/
    count<T extends OffchainRevocationCountArgs>(
      args?: Subset<T, OffchainRevocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OffchainRevocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OffchainRevocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffchainRevocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OffchainRevocationAggregateArgs>(args: Subset<T, OffchainRevocationAggregateArgs>): Prisma.PrismaPromise<GetOffchainRevocationAggregateType<T>>

    /**
     * Group by OffchainRevocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffchainRevocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OffchainRevocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OffchainRevocationGroupByArgs['orderBy'] }
        : { orderBy?: OffchainRevocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OffchainRevocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOffchainRevocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for OffchainRevocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OffchainRevocationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * OffchainRevocation base type for findUnique actions
   */
  export type OffchainRevocationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the OffchainRevocation
     */
    select?: OffchainRevocationSelect | null
    /**
     * Filter, which OffchainRevocation to fetch.
     */
    where: OffchainRevocationWhereUniqueInput
  }

  /**
   * OffchainRevocation findUnique
   */
  export interface OffchainRevocationFindUniqueArgs extends OffchainRevocationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * OffchainRevocation findUniqueOrThrow
   */
  export type OffchainRevocationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the OffchainRevocation
     */
    select?: OffchainRevocationSelect | null
    /**
     * Filter, which OffchainRevocation to fetch.
     */
    where: OffchainRevocationWhereUniqueInput
  }


  /**
   * OffchainRevocation base type for findFirst actions
   */
  export type OffchainRevocationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the OffchainRevocation
     */
    select?: OffchainRevocationSelect | null
    /**
     * Filter, which OffchainRevocation to fetch.
     */
    where?: OffchainRevocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OffchainRevocations to fetch.
     */
    orderBy?: Enumerable<OffchainRevocationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OffchainRevocations.
     */
    cursor?: OffchainRevocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OffchainRevocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OffchainRevocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OffchainRevocations.
     */
    distinct?: Enumerable<OffchainRevocationScalarFieldEnum>
  }

  /**
   * OffchainRevocation findFirst
   */
  export interface OffchainRevocationFindFirstArgs extends OffchainRevocationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * OffchainRevocation findFirstOrThrow
   */
  export type OffchainRevocationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the OffchainRevocation
     */
    select?: OffchainRevocationSelect | null
    /**
     * Filter, which OffchainRevocation to fetch.
     */
    where?: OffchainRevocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OffchainRevocations to fetch.
     */
    orderBy?: Enumerable<OffchainRevocationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OffchainRevocations.
     */
    cursor?: OffchainRevocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OffchainRevocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OffchainRevocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OffchainRevocations.
     */
    distinct?: Enumerable<OffchainRevocationScalarFieldEnum>
  }


  /**
   * OffchainRevocation findMany
   */
  export type OffchainRevocationFindManyArgs = {
    /**
     * Select specific fields to fetch from the OffchainRevocation
     */
    select?: OffchainRevocationSelect | null
    /**
     * Filter, which OffchainRevocations to fetch.
     */
    where?: OffchainRevocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OffchainRevocations to fetch.
     */
    orderBy?: Enumerable<OffchainRevocationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OffchainRevocations.
     */
    cursor?: OffchainRevocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OffchainRevocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OffchainRevocations.
     */
    skip?: number
    distinct?: Enumerable<OffchainRevocationScalarFieldEnum>
  }


  /**
   * OffchainRevocation create
   */
  export type OffchainRevocationCreateArgs = {
    /**
     * Select specific fields to fetch from the OffchainRevocation
     */
    select?: OffchainRevocationSelect | null
    /**
     * The data needed to create a OffchainRevocation.
     */
    data: XOR<OffchainRevocationCreateInput, OffchainRevocationUncheckedCreateInput>
  }


  /**
   * OffchainRevocation createMany
   */
  export type OffchainRevocationCreateManyArgs = {
    /**
     * The data used to create many OffchainRevocations.
     */
    data: Enumerable<OffchainRevocationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * OffchainRevocation update
   */
  export type OffchainRevocationUpdateArgs = {
    /**
     * Select specific fields to fetch from the OffchainRevocation
     */
    select?: OffchainRevocationSelect | null
    /**
     * The data needed to update a OffchainRevocation.
     */
    data: XOR<OffchainRevocationUpdateInput, OffchainRevocationUncheckedUpdateInput>
    /**
     * Choose, which OffchainRevocation to update.
     */
    where: OffchainRevocationWhereUniqueInput
  }


  /**
   * OffchainRevocation updateMany
   */
  export type OffchainRevocationUpdateManyArgs = {
    /**
     * The data used to update OffchainRevocations.
     */
    data: XOR<OffchainRevocationUpdateManyMutationInput, OffchainRevocationUncheckedUpdateManyInput>
    /**
     * Filter which OffchainRevocations to update
     */
    where?: OffchainRevocationWhereInput
  }


  /**
   * OffchainRevocation upsert
   */
  export type OffchainRevocationUpsertArgs = {
    /**
     * Select specific fields to fetch from the OffchainRevocation
     */
    select?: OffchainRevocationSelect | null
    /**
     * The filter to search for the OffchainRevocation to update in case it exists.
     */
    where: OffchainRevocationWhereUniqueInput
    /**
     * In case the OffchainRevocation found by the `where` argument doesn't exist, create a new OffchainRevocation with this data.
     */
    create: XOR<OffchainRevocationCreateInput, OffchainRevocationUncheckedCreateInput>
    /**
     * In case the OffchainRevocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OffchainRevocationUpdateInput, OffchainRevocationUncheckedUpdateInput>
  }


  /**
   * OffchainRevocation delete
   */
  export type OffchainRevocationDeleteArgs = {
    /**
     * Select specific fields to fetch from the OffchainRevocation
     */
    select?: OffchainRevocationSelect | null
    /**
     * Filter which OffchainRevocation to delete.
     */
    where: OffchainRevocationWhereUniqueInput
  }


  /**
   * OffchainRevocation deleteMany
   */
  export type OffchainRevocationDeleteManyArgs = {
    /**
     * Filter which OffchainRevocations to delete
     */
    where?: OffchainRevocationWhereInput
  }


  /**
   * OffchainRevocation without action
   */
  export type OffchainRevocationArgs = {
    /**
     * Select specific fields to fetch from the OffchainRevocation
     */
    select?: OffchainRevocationSelect | null
  }



  /**
   * Model EnsName
   */


  export type AggregateEnsName = {
    _count: EnsNameCountAggregateOutputType | null
    _avg: EnsNameAvgAggregateOutputType | null
    _sum: EnsNameSumAggregateOutputType | null
    _min: EnsNameMinAggregateOutputType | null
    _max: EnsNameMaxAggregateOutputType | null
  }

  export type EnsNameAvgAggregateOutputType = {
    timestamp: number | null
  }

  export type EnsNameSumAggregateOutputType = {
    timestamp: number | null
  }

  export type EnsNameMinAggregateOutputType = {
    id: string | null
    name: string | null
    timestamp: number | null
  }

  export type EnsNameMaxAggregateOutputType = {
    id: string | null
    name: string | null
    timestamp: number | null
  }

  export type EnsNameCountAggregateOutputType = {
    id: number
    name: number
    timestamp: number
    _all: number
  }


  export type EnsNameAvgAggregateInputType = {
    timestamp?: true
  }

  export type EnsNameSumAggregateInputType = {
    timestamp?: true
  }

  export type EnsNameMinAggregateInputType = {
    id?: true
    name?: true
    timestamp?: true
  }

  export type EnsNameMaxAggregateInputType = {
    id?: true
    name?: true
    timestamp?: true
  }

  export type EnsNameCountAggregateInputType = {
    id?: true
    name?: true
    timestamp?: true
    _all?: true
  }

  export type EnsNameAggregateArgs = {
    /**
     * Filter which EnsName to aggregate.
     */
    where?: EnsNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnsNames to fetch.
     */
    orderBy?: Enumerable<EnsNameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnsNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnsNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnsNames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EnsNames
    **/
    _count?: true | EnsNameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnsNameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnsNameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnsNameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnsNameMaxAggregateInputType
  }

  export type GetEnsNameAggregateType<T extends EnsNameAggregateArgs> = {
        [P in keyof T & keyof AggregateEnsName]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnsName[P]>
      : GetScalarType<T[P], AggregateEnsName[P]>
  }




  export type EnsNameGroupByArgs = {
    where?: EnsNameWhereInput
    orderBy?: Enumerable<EnsNameOrderByWithAggregationInput>
    by: EnsNameScalarFieldEnum[]
    having?: EnsNameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnsNameCountAggregateInputType | true
    _avg?: EnsNameAvgAggregateInputType
    _sum?: EnsNameSumAggregateInputType
    _min?: EnsNameMinAggregateInputType
    _max?: EnsNameMaxAggregateInputType
  }


  export type EnsNameGroupByOutputType = {
    id: string
    name: string
    timestamp: number
    _count: EnsNameCountAggregateOutputType | null
    _avg: EnsNameAvgAggregateOutputType | null
    _sum: EnsNameSumAggregateOutputType | null
    _min: EnsNameMinAggregateOutputType | null
    _max: EnsNameMaxAggregateOutputType | null
  }

  type GetEnsNameGroupByPayload<T extends EnsNameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EnsNameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnsNameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnsNameGroupByOutputType[P]>
            : GetScalarType<T[P], EnsNameGroupByOutputType[P]>
        }
      >
    >


  export type EnsNameSelect = {
    id?: boolean
    name?: boolean
    timestamp?: boolean
  }


  export type EnsNameGetPayload<S extends boolean | null | undefined | EnsNameArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EnsName :
    S extends undefined ? never :
    S extends { include: any } & (EnsNameArgs | EnsNameFindManyArgs)
    ? EnsName 
    : S extends { select: any } & (EnsNameArgs | EnsNameFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof EnsName ? EnsName[P] : never
  } 
      : EnsName


  type EnsNameCountArgs = 
    Omit<EnsNameFindManyArgs, 'select' | 'include'> & {
      select?: EnsNameCountAggregateInputType | true
    }

  export interface EnsNameDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one EnsName that matches the filter.
     * @param {EnsNameFindUniqueArgs} args - Arguments to find a EnsName
     * @example
     * // Get one EnsName
     * const ensName = await prisma.ensName.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EnsNameFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EnsNameFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EnsName'> extends True ? Prisma__EnsNameClient<EnsNameGetPayload<T>> : Prisma__EnsNameClient<EnsNameGetPayload<T> | null, null>

    /**
     * Find one EnsName that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EnsNameFindUniqueOrThrowArgs} args - Arguments to find a EnsName
     * @example
     * // Get one EnsName
     * const ensName = await prisma.ensName.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EnsNameFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EnsNameFindUniqueOrThrowArgs>
    ): Prisma__EnsNameClient<EnsNameGetPayload<T>>

    /**
     * Find the first EnsName that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsNameFindFirstArgs} args - Arguments to find a EnsName
     * @example
     * // Get one EnsName
     * const ensName = await prisma.ensName.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EnsNameFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EnsNameFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EnsName'> extends True ? Prisma__EnsNameClient<EnsNameGetPayload<T>> : Prisma__EnsNameClient<EnsNameGetPayload<T> | null, null>

    /**
     * Find the first EnsName that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsNameFindFirstOrThrowArgs} args - Arguments to find a EnsName
     * @example
     * // Get one EnsName
     * const ensName = await prisma.ensName.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EnsNameFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EnsNameFindFirstOrThrowArgs>
    ): Prisma__EnsNameClient<EnsNameGetPayload<T>>

    /**
     * Find zero or more EnsNames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsNameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EnsNames
     * const ensNames = await prisma.ensName.findMany()
     * 
     * // Get first 10 EnsNames
     * const ensNames = await prisma.ensName.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ensNameWithIdOnly = await prisma.ensName.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EnsNameFindManyArgs>(
      args?: SelectSubset<T, EnsNameFindManyArgs>
    ): Prisma.PrismaPromise<Array<EnsNameGetPayload<T>>>

    /**
     * Create a EnsName.
     * @param {EnsNameCreateArgs} args - Arguments to create a EnsName.
     * @example
     * // Create one EnsName
     * const EnsName = await prisma.ensName.create({
     *   data: {
     *     // ... data to create a EnsName
     *   }
     * })
     * 
    **/
    create<T extends EnsNameCreateArgs>(
      args: SelectSubset<T, EnsNameCreateArgs>
    ): Prisma__EnsNameClient<EnsNameGetPayload<T>>

    /**
     * Create many EnsNames.
     *     @param {EnsNameCreateManyArgs} args - Arguments to create many EnsNames.
     *     @example
     *     // Create many EnsNames
     *     const ensName = await prisma.ensName.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EnsNameCreateManyArgs>(
      args?: SelectSubset<T, EnsNameCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EnsName.
     * @param {EnsNameDeleteArgs} args - Arguments to delete one EnsName.
     * @example
     * // Delete one EnsName
     * const EnsName = await prisma.ensName.delete({
     *   where: {
     *     // ... filter to delete one EnsName
     *   }
     * })
     * 
    **/
    delete<T extends EnsNameDeleteArgs>(
      args: SelectSubset<T, EnsNameDeleteArgs>
    ): Prisma__EnsNameClient<EnsNameGetPayload<T>>

    /**
     * Update one EnsName.
     * @param {EnsNameUpdateArgs} args - Arguments to update one EnsName.
     * @example
     * // Update one EnsName
     * const ensName = await prisma.ensName.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EnsNameUpdateArgs>(
      args: SelectSubset<T, EnsNameUpdateArgs>
    ): Prisma__EnsNameClient<EnsNameGetPayload<T>>

    /**
     * Delete zero or more EnsNames.
     * @param {EnsNameDeleteManyArgs} args - Arguments to filter EnsNames to delete.
     * @example
     * // Delete a few EnsNames
     * const { count } = await prisma.ensName.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EnsNameDeleteManyArgs>(
      args?: SelectSubset<T, EnsNameDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EnsNames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsNameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EnsNames
     * const ensName = await prisma.ensName.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EnsNameUpdateManyArgs>(
      args: SelectSubset<T, EnsNameUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EnsName.
     * @param {EnsNameUpsertArgs} args - Arguments to update or create a EnsName.
     * @example
     * // Update or create a EnsName
     * const ensName = await prisma.ensName.upsert({
     *   create: {
     *     // ... data to create a EnsName
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EnsName we want to update
     *   }
     * })
    **/
    upsert<T extends EnsNameUpsertArgs>(
      args: SelectSubset<T, EnsNameUpsertArgs>
    ): Prisma__EnsNameClient<EnsNameGetPayload<T>>

    /**
     * Count the number of EnsNames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsNameCountArgs} args - Arguments to filter EnsNames to count.
     * @example
     * // Count the number of EnsNames
     * const count = await prisma.ensName.count({
     *   where: {
     *     // ... the filter for the EnsNames we want to count
     *   }
     * })
    **/
    count<T extends EnsNameCountArgs>(
      args?: Subset<T, EnsNameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnsNameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EnsName.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsNameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnsNameAggregateArgs>(args: Subset<T, EnsNameAggregateArgs>): Prisma.PrismaPromise<GetEnsNameAggregateType<T>>

    /**
     * Group by EnsName.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsNameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnsNameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnsNameGroupByArgs['orderBy'] }
        : { orderBy?: EnsNameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnsNameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnsNameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for EnsName.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EnsNameClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * EnsName base type for findUnique actions
   */
  export type EnsNameFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the EnsName
     */
    select?: EnsNameSelect | null
    /**
     * Filter, which EnsName to fetch.
     */
    where: EnsNameWhereUniqueInput
  }

  /**
   * EnsName findUnique
   */
  export interface EnsNameFindUniqueArgs extends EnsNameFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EnsName findUniqueOrThrow
   */
  export type EnsNameFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EnsName
     */
    select?: EnsNameSelect | null
    /**
     * Filter, which EnsName to fetch.
     */
    where: EnsNameWhereUniqueInput
  }


  /**
   * EnsName base type for findFirst actions
   */
  export type EnsNameFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the EnsName
     */
    select?: EnsNameSelect | null
    /**
     * Filter, which EnsName to fetch.
     */
    where?: EnsNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnsNames to fetch.
     */
    orderBy?: Enumerable<EnsNameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EnsNames.
     */
    cursor?: EnsNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnsNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnsNames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EnsNames.
     */
    distinct?: Enumerable<EnsNameScalarFieldEnum>
  }

  /**
   * EnsName findFirst
   */
  export interface EnsNameFindFirstArgs extends EnsNameFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EnsName findFirstOrThrow
   */
  export type EnsNameFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EnsName
     */
    select?: EnsNameSelect | null
    /**
     * Filter, which EnsName to fetch.
     */
    where?: EnsNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnsNames to fetch.
     */
    orderBy?: Enumerable<EnsNameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EnsNames.
     */
    cursor?: EnsNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnsNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnsNames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EnsNames.
     */
    distinct?: Enumerable<EnsNameScalarFieldEnum>
  }


  /**
   * EnsName findMany
   */
  export type EnsNameFindManyArgs = {
    /**
     * Select specific fields to fetch from the EnsName
     */
    select?: EnsNameSelect | null
    /**
     * Filter, which EnsNames to fetch.
     */
    where?: EnsNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnsNames to fetch.
     */
    orderBy?: Enumerable<EnsNameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EnsNames.
     */
    cursor?: EnsNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnsNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnsNames.
     */
    skip?: number
    distinct?: Enumerable<EnsNameScalarFieldEnum>
  }


  /**
   * EnsName create
   */
  export type EnsNameCreateArgs = {
    /**
     * Select specific fields to fetch from the EnsName
     */
    select?: EnsNameSelect | null
    /**
     * The data needed to create a EnsName.
     */
    data: XOR<EnsNameCreateInput, EnsNameUncheckedCreateInput>
  }


  /**
   * EnsName createMany
   */
  export type EnsNameCreateManyArgs = {
    /**
     * The data used to create many EnsNames.
     */
    data: Enumerable<EnsNameCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * EnsName update
   */
  export type EnsNameUpdateArgs = {
    /**
     * Select specific fields to fetch from the EnsName
     */
    select?: EnsNameSelect | null
    /**
     * The data needed to update a EnsName.
     */
    data: XOR<EnsNameUpdateInput, EnsNameUncheckedUpdateInput>
    /**
     * Choose, which EnsName to update.
     */
    where: EnsNameWhereUniqueInput
  }


  /**
   * EnsName updateMany
   */
  export type EnsNameUpdateManyArgs = {
    /**
     * The data used to update EnsNames.
     */
    data: XOR<EnsNameUpdateManyMutationInput, EnsNameUncheckedUpdateManyInput>
    /**
     * Filter which EnsNames to update
     */
    where?: EnsNameWhereInput
  }


  /**
   * EnsName upsert
   */
  export type EnsNameUpsertArgs = {
    /**
     * Select specific fields to fetch from the EnsName
     */
    select?: EnsNameSelect | null
    /**
     * The filter to search for the EnsName to update in case it exists.
     */
    where: EnsNameWhereUniqueInput
    /**
     * In case the EnsName found by the `where` argument doesn't exist, create a new EnsName with this data.
     */
    create: XOR<EnsNameCreateInput, EnsNameUncheckedCreateInput>
    /**
     * In case the EnsName was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnsNameUpdateInput, EnsNameUncheckedUpdateInput>
  }


  /**
   * EnsName delete
   */
  export type EnsNameDeleteArgs = {
    /**
     * Select specific fields to fetch from the EnsName
     */
    select?: EnsNameSelect | null
    /**
     * Filter which EnsName to delete.
     */
    where: EnsNameWhereUniqueInput
  }


  /**
   * EnsName deleteMany
   */
  export type EnsNameDeleteManyArgs = {
    /**
     * Filter which EnsNames to delete
     */
    where?: EnsNameWhereInput
  }


  /**
   * EnsName without action
   */
  export type EnsNameArgs = {
    /**
     * Select specific fields to fetch from the EnsName
     */
    select?: EnsNameSelect | null
  }



  /**
   * Model ServiceStat
   */


  export type AggregateServiceStat = {
    _count: ServiceStatCountAggregateOutputType | null
    _min: ServiceStatMinAggregateOutputType | null
    _max: ServiceStatMaxAggregateOutputType | null
  }

  export type ServiceStatMinAggregateOutputType = {
    name: string | null
    value: string | null
  }

  export type ServiceStatMaxAggregateOutputType = {
    name: string | null
    value: string | null
  }

  export type ServiceStatCountAggregateOutputType = {
    name: number
    value: number
    _all: number
  }


  export type ServiceStatMinAggregateInputType = {
    name?: true
    value?: true
  }

  export type ServiceStatMaxAggregateInputType = {
    name?: true
    value?: true
  }

  export type ServiceStatCountAggregateInputType = {
    name?: true
    value?: true
    _all?: true
  }

  export type ServiceStatAggregateArgs = {
    /**
     * Filter which ServiceStat to aggregate.
     */
    where?: ServiceStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceStats to fetch.
     */
    orderBy?: Enumerable<ServiceStatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceStats
    **/
    _count?: true | ServiceStatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceStatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceStatMaxAggregateInputType
  }

  export type GetServiceStatAggregateType<T extends ServiceStatAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceStat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceStat[P]>
      : GetScalarType<T[P], AggregateServiceStat[P]>
  }




  export type ServiceStatGroupByArgs = {
    where?: ServiceStatWhereInput
    orderBy?: Enumerable<ServiceStatOrderByWithAggregationInput>
    by: ServiceStatScalarFieldEnum[]
    having?: ServiceStatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceStatCountAggregateInputType | true
    _min?: ServiceStatMinAggregateInputType
    _max?: ServiceStatMaxAggregateInputType
  }


  export type ServiceStatGroupByOutputType = {
    name: string
    value: string
    _count: ServiceStatCountAggregateOutputType | null
    _min: ServiceStatMinAggregateOutputType | null
    _max: ServiceStatMaxAggregateOutputType | null
  }

  type GetServiceStatGroupByPayload<T extends ServiceStatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ServiceStatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceStatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceStatGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceStatGroupByOutputType[P]>
        }
      >
    >


  export type ServiceStatSelect = {
    name?: boolean
    value?: boolean
  }


  export type ServiceStatGetPayload<S extends boolean | null | undefined | ServiceStatArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ServiceStat :
    S extends undefined ? never :
    S extends { include: any } & (ServiceStatArgs | ServiceStatFindManyArgs)
    ? ServiceStat 
    : S extends { select: any } & (ServiceStatArgs | ServiceStatFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ServiceStat ? ServiceStat[P] : never
  } 
      : ServiceStat


  type ServiceStatCountArgs = 
    Omit<ServiceStatFindManyArgs, 'select' | 'include'> & {
      select?: ServiceStatCountAggregateInputType | true
    }

  export interface ServiceStatDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ServiceStat that matches the filter.
     * @param {ServiceStatFindUniqueArgs} args - Arguments to find a ServiceStat
     * @example
     * // Get one ServiceStat
     * const serviceStat = await prisma.serviceStat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServiceStatFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ServiceStatFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ServiceStat'> extends True ? Prisma__ServiceStatClient<ServiceStatGetPayload<T>> : Prisma__ServiceStatClient<ServiceStatGetPayload<T> | null, null>

    /**
     * Find one ServiceStat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServiceStatFindUniqueOrThrowArgs} args - Arguments to find a ServiceStat
     * @example
     * // Get one ServiceStat
     * const serviceStat = await prisma.serviceStat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServiceStatFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ServiceStatFindUniqueOrThrowArgs>
    ): Prisma__ServiceStatClient<ServiceStatGetPayload<T>>

    /**
     * Find the first ServiceStat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatFindFirstArgs} args - Arguments to find a ServiceStat
     * @example
     * // Get one ServiceStat
     * const serviceStat = await prisma.serviceStat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServiceStatFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ServiceStatFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ServiceStat'> extends True ? Prisma__ServiceStatClient<ServiceStatGetPayload<T>> : Prisma__ServiceStatClient<ServiceStatGetPayload<T> | null, null>

    /**
     * Find the first ServiceStat that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatFindFirstOrThrowArgs} args - Arguments to find a ServiceStat
     * @example
     * // Get one ServiceStat
     * const serviceStat = await prisma.serviceStat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServiceStatFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ServiceStatFindFirstOrThrowArgs>
    ): Prisma__ServiceStatClient<ServiceStatGetPayload<T>>

    /**
     * Find zero or more ServiceStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceStats
     * const serviceStats = await prisma.serviceStat.findMany()
     * 
     * // Get first 10 ServiceStats
     * const serviceStats = await prisma.serviceStat.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const serviceStatWithNameOnly = await prisma.serviceStat.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends ServiceStatFindManyArgs>(
      args?: SelectSubset<T, ServiceStatFindManyArgs>
    ): Prisma.PrismaPromise<Array<ServiceStatGetPayload<T>>>

    /**
     * Create a ServiceStat.
     * @param {ServiceStatCreateArgs} args - Arguments to create a ServiceStat.
     * @example
     * // Create one ServiceStat
     * const ServiceStat = await prisma.serviceStat.create({
     *   data: {
     *     // ... data to create a ServiceStat
     *   }
     * })
     * 
    **/
    create<T extends ServiceStatCreateArgs>(
      args: SelectSubset<T, ServiceStatCreateArgs>
    ): Prisma__ServiceStatClient<ServiceStatGetPayload<T>>

    /**
     * Create many ServiceStats.
     *     @param {ServiceStatCreateManyArgs} args - Arguments to create many ServiceStats.
     *     @example
     *     // Create many ServiceStats
     *     const serviceStat = await prisma.serviceStat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServiceStatCreateManyArgs>(
      args?: SelectSubset<T, ServiceStatCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ServiceStat.
     * @param {ServiceStatDeleteArgs} args - Arguments to delete one ServiceStat.
     * @example
     * // Delete one ServiceStat
     * const ServiceStat = await prisma.serviceStat.delete({
     *   where: {
     *     // ... filter to delete one ServiceStat
     *   }
     * })
     * 
    **/
    delete<T extends ServiceStatDeleteArgs>(
      args: SelectSubset<T, ServiceStatDeleteArgs>
    ): Prisma__ServiceStatClient<ServiceStatGetPayload<T>>

    /**
     * Update one ServiceStat.
     * @param {ServiceStatUpdateArgs} args - Arguments to update one ServiceStat.
     * @example
     * // Update one ServiceStat
     * const serviceStat = await prisma.serviceStat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServiceStatUpdateArgs>(
      args: SelectSubset<T, ServiceStatUpdateArgs>
    ): Prisma__ServiceStatClient<ServiceStatGetPayload<T>>

    /**
     * Delete zero or more ServiceStats.
     * @param {ServiceStatDeleteManyArgs} args - Arguments to filter ServiceStats to delete.
     * @example
     * // Delete a few ServiceStats
     * const { count } = await prisma.serviceStat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServiceStatDeleteManyArgs>(
      args?: SelectSubset<T, ServiceStatDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceStats
     * const serviceStat = await prisma.serviceStat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServiceStatUpdateManyArgs>(
      args: SelectSubset<T, ServiceStatUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServiceStat.
     * @param {ServiceStatUpsertArgs} args - Arguments to update or create a ServiceStat.
     * @example
     * // Update or create a ServiceStat
     * const serviceStat = await prisma.serviceStat.upsert({
     *   create: {
     *     // ... data to create a ServiceStat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceStat we want to update
     *   }
     * })
    **/
    upsert<T extends ServiceStatUpsertArgs>(
      args: SelectSubset<T, ServiceStatUpsertArgs>
    ): Prisma__ServiceStatClient<ServiceStatGetPayload<T>>

    /**
     * Count the number of ServiceStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatCountArgs} args - Arguments to filter ServiceStats to count.
     * @example
     * // Count the number of ServiceStats
     * const count = await prisma.serviceStat.count({
     *   where: {
     *     // ... the filter for the ServiceStats we want to count
     *   }
     * })
    **/
    count<T extends ServiceStatCountArgs>(
      args?: Subset<T, ServiceStatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceStatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceStatAggregateArgs>(args: Subset<T, ServiceStatAggregateArgs>): Prisma.PrismaPromise<GetServiceStatAggregateType<T>>

    /**
     * Group by ServiceStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceStatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceStatGroupByArgs['orderBy'] }
        : { orderBy?: ServiceStatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceStatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceStatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceStat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ServiceStatClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ServiceStat base type for findUnique actions
   */
  export type ServiceStatFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ServiceStat
     */
    select?: ServiceStatSelect | null
    /**
     * Filter, which ServiceStat to fetch.
     */
    where: ServiceStatWhereUniqueInput
  }

  /**
   * ServiceStat findUnique
   */
  export interface ServiceStatFindUniqueArgs extends ServiceStatFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ServiceStat findUniqueOrThrow
   */
  export type ServiceStatFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ServiceStat
     */
    select?: ServiceStatSelect | null
    /**
     * Filter, which ServiceStat to fetch.
     */
    where: ServiceStatWhereUniqueInput
  }


  /**
   * ServiceStat base type for findFirst actions
   */
  export type ServiceStatFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ServiceStat
     */
    select?: ServiceStatSelect | null
    /**
     * Filter, which ServiceStat to fetch.
     */
    where?: ServiceStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceStats to fetch.
     */
    orderBy?: Enumerable<ServiceStatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceStats.
     */
    cursor?: ServiceStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceStats.
     */
    distinct?: Enumerable<ServiceStatScalarFieldEnum>
  }

  /**
   * ServiceStat findFirst
   */
  export interface ServiceStatFindFirstArgs extends ServiceStatFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ServiceStat findFirstOrThrow
   */
  export type ServiceStatFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ServiceStat
     */
    select?: ServiceStatSelect | null
    /**
     * Filter, which ServiceStat to fetch.
     */
    where?: ServiceStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceStats to fetch.
     */
    orderBy?: Enumerable<ServiceStatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceStats.
     */
    cursor?: ServiceStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceStats.
     */
    distinct?: Enumerable<ServiceStatScalarFieldEnum>
  }


  /**
   * ServiceStat findMany
   */
  export type ServiceStatFindManyArgs = {
    /**
     * Select specific fields to fetch from the ServiceStat
     */
    select?: ServiceStatSelect | null
    /**
     * Filter, which ServiceStats to fetch.
     */
    where?: ServiceStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceStats to fetch.
     */
    orderBy?: Enumerable<ServiceStatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceStats.
     */
    cursor?: ServiceStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceStats.
     */
    skip?: number
    distinct?: Enumerable<ServiceStatScalarFieldEnum>
  }


  /**
   * ServiceStat create
   */
  export type ServiceStatCreateArgs = {
    /**
     * Select specific fields to fetch from the ServiceStat
     */
    select?: ServiceStatSelect | null
    /**
     * The data needed to create a ServiceStat.
     */
    data: XOR<ServiceStatCreateInput, ServiceStatUncheckedCreateInput>
  }


  /**
   * ServiceStat createMany
   */
  export type ServiceStatCreateManyArgs = {
    /**
     * The data used to create many ServiceStats.
     */
    data: Enumerable<ServiceStatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ServiceStat update
   */
  export type ServiceStatUpdateArgs = {
    /**
     * Select specific fields to fetch from the ServiceStat
     */
    select?: ServiceStatSelect | null
    /**
     * The data needed to update a ServiceStat.
     */
    data: XOR<ServiceStatUpdateInput, ServiceStatUncheckedUpdateInput>
    /**
     * Choose, which ServiceStat to update.
     */
    where: ServiceStatWhereUniqueInput
  }


  /**
   * ServiceStat updateMany
   */
  export type ServiceStatUpdateManyArgs = {
    /**
     * The data used to update ServiceStats.
     */
    data: XOR<ServiceStatUpdateManyMutationInput, ServiceStatUncheckedUpdateManyInput>
    /**
     * Filter which ServiceStats to update
     */
    where?: ServiceStatWhereInput
  }


  /**
   * ServiceStat upsert
   */
  export type ServiceStatUpsertArgs = {
    /**
     * Select specific fields to fetch from the ServiceStat
     */
    select?: ServiceStatSelect | null
    /**
     * The filter to search for the ServiceStat to update in case it exists.
     */
    where: ServiceStatWhereUniqueInput
    /**
     * In case the ServiceStat found by the `where` argument doesn't exist, create a new ServiceStat with this data.
     */
    create: XOR<ServiceStatCreateInput, ServiceStatUncheckedCreateInput>
    /**
     * In case the ServiceStat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceStatUpdateInput, ServiceStatUncheckedUpdateInput>
  }


  /**
   * ServiceStat delete
   */
  export type ServiceStatDeleteArgs = {
    /**
     * Select specific fields to fetch from the ServiceStat
     */
    select?: ServiceStatSelect | null
    /**
     * Filter which ServiceStat to delete.
     */
    where: ServiceStatWhereUniqueInput
  }


  /**
   * ServiceStat deleteMany
   */
  export type ServiceStatDeleteManyArgs = {
    /**
     * Filter which ServiceStats to delete
     */
    where?: ServiceStatWhereInput
  }


  /**
   * ServiceStat without action
   */
  export type ServiceStatArgs = {
    /**
     * Select specific fields to fetch from the ServiceStat
     */
    select?: ServiceStatSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AttestationScalarFieldEnum: {
    id: 'id',
    data: 'data',
    decodedDataJson: 'decodedDataJson',
    recipient: 'recipient',
    attester: 'attester',
    time: 'time',
    timeCreated: 'timeCreated',
    expirationTime: 'expirationTime',
    revocationTime: 'revocationTime',
    refUID: 'refUID',
    revocable: 'revocable',
    revoked: 'revoked',
    txid: 'txid',
    schemaId: 'schemaId',
    ipfsHash: 'ipfsHash',
    isOffchain: 'isOffchain'
  };

  export type AttestationScalarFieldEnum = (typeof AttestationScalarFieldEnum)[keyof typeof AttestationScalarFieldEnum]


  export const EnsNameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    timestamp: 'timestamp'
  };

  export type EnsNameScalarFieldEnum = (typeof EnsNameScalarFieldEnum)[keyof typeof EnsNameScalarFieldEnum]


  export const OffchainRevocationScalarFieldEnum: {
    id: 'id',
    from: 'from',
    uid: 'uid',
    txid: 'txid',
    timestamp: 'timestamp'
  };

  export type OffchainRevocationScalarFieldEnum = (typeof OffchainRevocationScalarFieldEnum)[keyof typeof OffchainRevocationScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SchemaNameScalarFieldEnum: {
    id: 'id',
    schemaId: 'schemaId',
    attesterAddress: 'attesterAddress',
    name: 'name',
    time: 'time',
    isCreator: 'isCreator'
  };

  export type SchemaNameScalarFieldEnum = (typeof SchemaNameScalarFieldEnum)[keyof typeof SchemaNameScalarFieldEnum]


  export const SchemaScalarFieldEnum: {
    id: 'id',
    schema: 'schema',
    creator: 'creator',
    resolver: 'resolver',
    revocable: 'revocable',
    index: 'index',
    txid: 'txid',
    time: 'time'
  };

  export type SchemaScalarFieldEnum = (typeof SchemaScalarFieldEnum)[keyof typeof SchemaScalarFieldEnum]


  export const ServiceStatScalarFieldEnum: {
    name: 'name',
    value: 'value'
  };

  export type ServiceStatScalarFieldEnum = (typeof ServiceStatScalarFieldEnum)[keyof typeof ServiceStatScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TimestampScalarFieldEnum: {
    id: 'id',
    from: 'from',
    txid: 'txid',
    tree: 'tree',
    timestamp: 'timestamp'
  };

  export type TimestampScalarFieldEnum = (typeof TimestampScalarFieldEnum)[keyof typeof TimestampScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type SchemaWhereInput = {
    AND?: Enumerable<SchemaWhereInput>
    OR?: Enumerable<SchemaWhereInput>
    NOT?: Enumerable<SchemaWhereInput>
    id?: StringFilter | string
    schema?: StringFilter | string
    creator?: StringFilter | string
    resolver?: StringFilter | string
    revocable?: BoolFilter | boolean
    index?: StringFilter | string
    txid?: StringFilter | string
    time?: IntFilter | number
    attestations?: AttestationListRelationFilter
    schemaNames?: SchemaNameListRelationFilter
  }

  export type SchemaOrderByWithRelationInput = {
    id?: SortOrder
    schema?: SortOrder
    creator?: SortOrder
    resolver?: SortOrder
    revocable?: SortOrder
    index?: SortOrder
    txid?: SortOrder
    time?: SortOrder
    attestations?: AttestationOrderByRelationAggregateInput
    schemaNames?: SchemaNameOrderByRelationAggregateInput
  }

  export type SchemaWhereUniqueInput = {
    id?: string
  }

  export type SchemaOrderByWithAggregationInput = {
    id?: SortOrder
    schema?: SortOrder
    creator?: SortOrder
    resolver?: SortOrder
    revocable?: SortOrder
    index?: SortOrder
    txid?: SortOrder
    time?: SortOrder
    _count?: SchemaCountOrderByAggregateInput
    _avg?: SchemaAvgOrderByAggregateInput
    _max?: SchemaMaxOrderByAggregateInput
    _min?: SchemaMinOrderByAggregateInput
    _sum?: SchemaSumOrderByAggregateInput
  }

  export type SchemaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SchemaScalarWhereWithAggregatesInput>
    OR?: Enumerable<SchemaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SchemaScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    schema?: StringWithAggregatesFilter | string
    creator?: StringWithAggregatesFilter | string
    resolver?: StringWithAggregatesFilter | string
    revocable?: BoolWithAggregatesFilter | boolean
    index?: StringWithAggregatesFilter | string
    txid?: StringWithAggregatesFilter | string
    time?: IntWithAggregatesFilter | number
  }

  export type AttestationWhereInput = {
    AND?: Enumerable<AttestationWhereInput>
    OR?: Enumerable<AttestationWhereInput>
    NOT?: Enumerable<AttestationWhereInput>
    id?: StringFilter | string
    data?: StringFilter | string
    decodedDataJson?: StringFilter | string
    recipient?: StringFilter | string
    attester?: StringFilter | string
    time?: IntFilter | number
    timeCreated?: IntFilter | number
    expirationTime?: IntFilter | number
    revocationTime?: IntFilter | number
    refUID?: StringFilter | string
    revocable?: BoolFilter | boolean
    revoked?: BoolFilter | boolean
    txid?: StringFilter | string
    schemaId?: StringFilter | string
    ipfsHash?: StringFilter | string
    isOffchain?: BoolFilter | boolean
    schema?: XOR<SchemaRelationFilter, SchemaWhereInput>
  }

  export type AttestationOrderByWithRelationInput = {
    id?: SortOrder
    data?: SortOrder
    decodedDataJson?: SortOrder
    recipient?: SortOrder
    attester?: SortOrder
    time?: SortOrder
    timeCreated?: SortOrder
    expirationTime?: SortOrder
    revocationTime?: SortOrder
    refUID?: SortOrder
    revocable?: SortOrder
    revoked?: SortOrder
    txid?: SortOrder
    schemaId?: SortOrder
    ipfsHash?: SortOrder
    isOffchain?: SortOrder
    schema?: SchemaOrderByWithRelationInput
  }

  export type AttestationWhereUniqueInput = {
    id?: string
  }

  export type AttestationOrderByWithAggregationInput = {
    id?: SortOrder
    data?: SortOrder
    decodedDataJson?: SortOrder
    recipient?: SortOrder
    attester?: SortOrder
    time?: SortOrder
    timeCreated?: SortOrder
    expirationTime?: SortOrder
    revocationTime?: SortOrder
    refUID?: SortOrder
    revocable?: SortOrder
    revoked?: SortOrder
    txid?: SortOrder
    schemaId?: SortOrder
    ipfsHash?: SortOrder
    isOffchain?: SortOrder
    _count?: AttestationCountOrderByAggregateInput
    _avg?: AttestationAvgOrderByAggregateInput
    _max?: AttestationMaxOrderByAggregateInput
    _min?: AttestationMinOrderByAggregateInput
    _sum?: AttestationSumOrderByAggregateInput
  }

  export type AttestationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AttestationScalarWhereWithAggregatesInput>
    OR?: Enumerable<AttestationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AttestationScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    data?: StringWithAggregatesFilter | string
    decodedDataJson?: StringWithAggregatesFilter | string
    recipient?: StringWithAggregatesFilter | string
    attester?: StringWithAggregatesFilter | string
    time?: IntWithAggregatesFilter | number
    timeCreated?: IntWithAggregatesFilter | number
    expirationTime?: IntWithAggregatesFilter | number
    revocationTime?: IntWithAggregatesFilter | number
    refUID?: StringWithAggregatesFilter | string
    revocable?: BoolWithAggregatesFilter | boolean
    revoked?: BoolWithAggregatesFilter | boolean
    txid?: StringWithAggregatesFilter | string
    schemaId?: StringWithAggregatesFilter | string
    ipfsHash?: StringWithAggregatesFilter | string
    isOffchain?: BoolWithAggregatesFilter | boolean
  }

  export type SchemaNameWhereInput = {
    AND?: Enumerable<SchemaNameWhereInput>
    OR?: Enumerable<SchemaNameWhereInput>
    NOT?: Enumerable<SchemaNameWhereInput>
    id?: StringFilter | string
    schemaId?: StringFilter | string
    attesterAddress?: StringFilter | string
    name?: StringFilter | string
    time?: IntFilter | number
    isCreator?: BoolFilter | boolean
    schema?: XOR<SchemaRelationFilter, SchemaWhereInput>
  }

  export type SchemaNameOrderByWithRelationInput = {
    id?: SortOrder
    schemaId?: SortOrder
    attesterAddress?: SortOrder
    name?: SortOrder
    time?: SortOrder
    isCreator?: SortOrder
    schema?: SchemaOrderByWithRelationInput
  }

  export type SchemaNameWhereUniqueInput = {
    id?: string
  }

  export type SchemaNameOrderByWithAggregationInput = {
    id?: SortOrder
    schemaId?: SortOrder
    attesterAddress?: SortOrder
    name?: SortOrder
    time?: SortOrder
    isCreator?: SortOrder
    _count?: SchemaNameCountOrderByAggregateInput
    _avg?: SchemaNameAvgOrderByAggregateInput
    _max?: SchemaNameMaxOrderByAggregateInput
    _min?: SchemaNameMinOrderByAggregateInput
    _sum?: SchemaNameSumOrderByAggregateInput
  }

  export type SchemaNameScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SchemaNameScalarWhereWithAggregatesInput>
    OR?: Enumerable<SchemaNameScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SchemaNameScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    schemaId?: StringWithAggregatesFilter | string
    attesterAddress?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    time?: IntWithAggregatesFilter | number
    isCreator?: BoolWithAggregatesFilter | boolean
  }

  export type TimestampWhereInput = {
    AND?: Enumerable<TimestampWhereInput>
    OR?: Enumerable<TimestampWhereInput>
    NOT?: Enumerable<TimestampWhereInput>
    id?: StringFilter | string
    from?: StringFilter | string
    txid?: StringFilter | string
    tree?: StringFilter | string
    timestamp?: IntFilter | number
  }

  export type TimestampOrderByWithRelationInput = {
    id?: SortOrder
    from?: SortOrder
    txid?: SortOrder
    tree?: SortOrder
    timestamp?: SortOrder
  }

  export type TimestampWhereUniqueInput = {
    id?: string
  }

  export type TimestampOrderByWithAggregationInput = {
    id?: SortOrder
    from?: SortOrder
    txid?: SortOrder
    tree?: SortOrder
    timestamp?: SortOrder
    _count?: TimestampCountOrderByAggregateInput
    _avg?: TimestampAvgOrderByAggregateInput
    _max?: TimestampMaxOrderByAggregateInput
    _min?: TimestampMinOrderByAggregateInput
    _sum?: TimestampSumOrderByAggregateInput
  }

  export type TimestampScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TimestampScalarWhereWithAggregatesInput>
    OR?: Enumerable<TimestampScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TimestampScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    from?: StringWithAggregatesFilter | string
    txid?: StringWithAggregatesFilter | string
    tree?: StringWithAggregatesFilter | string
    timestamp?: IntWithAggregatesFilter | number
  }

  export type OffchainRevocationWhereInput = {
    AND?: Enumerable<OffchainRevocationWhereInput>
    OR?: Enumerable<OffchainRevocationWhereInput>
    NOT?: Enumerable<OffchainRevocationWhereInput>
    id?: StringFilter | string
    from?: StringFilter | string
    uid?: StringFilter | string
    txid?: StringFilter | string
    timestamp?: IntFilter | number
  }

  export type OffchainRevocationOrderByWithRelationInput = {
    id?: SortOrder
    from?: SortOrder
    uid?: SortOrder
    txid?: SortOrder
    timestamp?: SortOrder
  }

  export type OffchainRevocationWhereUniqueInput = {
    id?: string
  }

  export type OffchainRevocationOrderByWithAggregationInput = {
    id?: SortOrder
    from?: SortOrder
    uid?: SortOrder
    txid?: SortOrder
    timestamp?: SortOrder
    _count?: OffchainRevocationCountOrderByAggregateInput
    _avg?: OffchainRevocationAvgOrderByAggregateInput
    _max?: OffchainRevocationMaxOrderByAggregateInput
    _min?: OffchainRevocationMinOrderByAggregateInput
    _sum?: OffchainRevocationSumOrderByAggregateInput
  }

  export type OffchainRevocationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OffchainRevocationScalarWhereWithAggregatesInput>
    OR?: Enumerable<OffchainRevocationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OffchainRevocationScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    from?: StringWithAggregatesFilter | string
    uid?: StringWithAggregatesFilter | string
    txid?: StringWithAggregatesFilter | string
    timestamp?: IntWithAggregatesFilter | number
  }

  export type EnsNameWhereInput = {
    AND?: Enumerable<EnsNameWhereInput>
    OR?: Enumerable<EnsNameWhereInput>
    NOT?: Enumerable<EnsNameWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    timestamp?: IntFilter | number
  }

  export type EnsNameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    timestamp?: SortOrder
  }

  export type EnsNameWhereUniqueInput = {
    id?: string
  }

  export type EnsNameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    timestamp?: SortOrder
    _count?: EnsNameCountOrderByAggregateInput
    _avg?: EnsNameAvgOrderByAggregateInput
    _max?: EnsNameMaxOrderByAggregateInput
    _min?: EnsNameMinOrderByAggregateInput
    _sum?: EnsNameSumOrderByAggregateInput
  }

  export type EnsNameScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EnsNameScalarWhereWithAggregatesInput>
    OR?: Enumerable<EnsNameScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EnsNameScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    timestamp?: IntWithAggregatesFilter | number
  }

  export type ServiceStatWhereInput = {
    AND?: Enumerable<ServiceStatWhereInput>
    OR?: Enumerable<ServiceStatWhereInput>
    NOT?: Enumerable<ServiceStatWhereInput>
    name?: StringFilter | string
    value?: StringFilter | string
  }

  export type ServiceStatOrderByWithRelationInput = {
    name?: SortOrder
    value?: SortOrder
  }

  export type ServiceStatWhereUniqueInput = {
    name?: string
  }

  export type ServiceStatOrderByWithAggregationInput = {
    name?: SortOrder
    value?: SortOrder
    _count?: ServiceStatCountOrderByAggregateInput
    _max?: ServiceStatMaxOrderByAggregateInput
    _min?: ServiceStatMinOrderByAggregateInput
  }

  export type ServiceStatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ServiceStatScalarWhereWithAggregatesInput>
    OR?: Enumerable<ServiceStatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ServiceStatScalarWhereWithAggregatesInput>
    name?: StringWithAggregatesFilter | string
    value?: StringWithAggregatesFilter | string
  }

  export type SchemaCreateInput = {
    id: string
    schema: string
    creator: string
    resolver: string
    revocable: boolean
    index: string
    txid: string
    time: number
    attestations?: AttestationCreateNestedManyWithoutSchemaInput
    schemaNames?: SchemaNameCreateNestedManyWithoutSchemaInput
  }

  export type SchemaUncheckedCreateInput = {
    id: string
    schema: string
    creator: string
    resolver: string
    revocable: boolean
    index: string
    txid: string
    time: number
    attestations?: AttestationUncheckedCreateNestedManyWithoutSchemaInput
    schemaNames?: SchemaNameUncheckedCreateNestedManyWithoutSchemaInput
  }

  export type SchemaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schema?: StringFieldUpdateOperationsInput | string
    creator?: StringFieldUpdateOperationsInput | string
    resolver?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    index?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    attestations?: AttestationUpdateManyWithoutSchemaNestedInput
    schemaNames?: SchemaNameUpdateManyWithoutSchemaNestedInput
  }

  export type SchemaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schema?: StringFieldUpdateOperationsInput | string
    creator?: StringFieldUpdateOperationsInput | string
    resolver?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    index?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    attestations?: AttestationUncheckedUpdateManyWithoutSchemaNestedInput
    schemaNames?: SchemaNameUncheckedUpdateManyWithoutSchemaNestedInput
  }

  export type SchemaCreateManyInput = {
    id: string
    schema: string
    creator: string
    resolver: string
    revocable: boolean
    index: string
    txid: string
    time: number
  }

  export type SchemaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    schema?: StringFieldUpdateOperationsInput | string
    creator?: StringFieldUpdateOperationsInput | string
    resolver?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    index?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
  }

  export type SchemaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schema?: StringFieldUpdateOperationsInput | string
    creator?: StringFieldUpdateOperationsInput | string
    resolver?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    index?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
  }

  export type AttestationCreateInput = {
    id: string
    data: string
    decodedDataJson?: string
    recipient: string
    attester: string
    time: number
    timeCreated: number
    expirationTime: number
    revocationTime: number
    refUID: string
    revocable: boolean
    revoked: boolean
    txid: string
    ipfsHash: string
    isOffchain: boolean
    schema: SchemaCreateNestedOneWithoutAttestationsInput
  }

  export type AttestationUncheckedCreateInput = {
    id: string
    data: string
    decodedDataJson?: string
    recipient: string
    attester: string
    time: number
    timeCreated: number
    expirationTime: number
    revocationTime: number
    refUID: string
    revocable: boolean
    revoked: boolean
    txid: string
    schemaId: string
    ipfsHash: string
    isOffchain: boolean
  }

  export type AttestationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    decodedDataJson?: StringFieldUpdateOperationsInput | string
    recipient?: StringFieldUpdateOperationsInput | string
    attester?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    timeCreated?: IntFieldUpdateOperationsInput | number
    expirationTime?: IntFieldUpdateOperationsInput | number
    revocationTime?: IntFieldUpdateOperationsInput | number
    refUID?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    revoked?: BoolFieldUpdateOperationsInput | boolean
    txid?: StringFieldUpdateOperationsInput | string
    ipfsHash?: StringFieldUpdateOperationsInput | string
    isOffchain?: BoolFieldUpdateOperationsInput | boolean
    schema?: SchemaUpdateOneRequiredWithoutAttestationsNestedInput
  }

  export type AttestationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    decodedDataJson?: StringFieldUpdateOperationsInput | string
    recipient?: StringFieldUpdateOperationsInput | string
    attester?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    timeCreated?: IntFieldUpdateOperationsInput | number
    expirationTime?: IntFieldUpdateOperationsInput | number
    revocationTime?: IntFieldUpdateOperationsInput | number
    refUID?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    revoked?: BoolFieldUpdateOperationsInput | boolean
    txid?: StringFieldUpdateOperationsInput | string
    schemaId?: StringFieldUpdateOperationsInput | string
    ipfsHash?: StringFieldUpdateOperationsInput | string
    isOffchain?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttestationCreateManyInput = {
    id: string
    data: string
    decodedDataJson?: string
    recipient: string
    attester: string
    time: number
    timeCreated: number
    expirationTime: number
    revocationTime: number
    refUID: string
    revocable: boolean
    revoked: boolean
    txid: string
    schemaId: string
    ipfsHash: string
    isOffchain: boolean
  }

  export type AttestationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    decodedDataJson?: StringFieldUpdateOperationsInput | string
    recipient?: StringFieldUpdateOperationsInput | string
    attester?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    timeCreated?: IntFieldUpdateOperationsInput | number
    expirationTime?: IntFieldUpdateOperationsInput | number
    revocationTime?: IntFieldUpdateOperationsInput | number
    refUID?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    revoked?: BoolFieldUpdateOperationsInput | boolean
    txid?: StringFieldUpdateOperationsInput | string
    ipfsHash?: StringFieldUpdateOperationsInput | string
    isOffchain?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttestationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    decodedDataJson?: StringFieldUpdateOperationsInput | string
    recipient?: StringFieldUpdateOperationsInput | string
    attester?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    timeCreated?: IntFieldUpdateOperationsInput | number
    expirationTime?: IntFieldUpdateOperationsInput | number
    revocationTime?: IntFieldUpdateOperationsInput | number
    refUID?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    revoked?: BoolFieldUpdateOperationsInput | boolean
    txid?: StringFieldUpdateOperationsInput | string
    schemaId?: StringFieldUpdateOperationsInput | string
    ipfsHash?: StringFieldUpdateOperationsInput | string
    isOffchain?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SchemaNameCreateInput = {
    id?: string
    attesterAddress: string
    name: string
    time: number
    isCreator: boolean
    schema: SchemaCreateNestedOneWithoutSchemaNamesInput
  }

  export type SchemaNameUncheckedCreateInput = {
    id?: string
    schemaId: string
    attesterAddress: string
    name: string
    time: number
    isCreator: boolean
  }

  export type SchemaNameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    attesterAddress?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    isCreator?: BoolFieldUpdateOperationsInput | boolean
    schema?: SchemaUpdateOneRequiredWithoutSchemaNamesNestedInput
  }

  export type SchemaNameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schemaId?: StringFieldUpdateOperationsInput | string
    attesterAddress?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    isCreator?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SchemaNameCreateManyInput = {
    id?: string
    schemaId: string
    attesterAddress: string
    name: string
    time: number
    isCreator: boolean
  }

  export type SchemaNameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    attesterAddress?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    isCreator?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SchemaNameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schemaId?: StringFieldUpdateOperationsInput | string
    attesterAddress?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    isCreator?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TimestampCreateInput = {
    id: string
    from: string
    txid: string
    tree?: string
    timestamp: number
  }

  export type TimestampUncheckedCreateInput = {
    id: string
    from: string
    txid: string
    tree?: string
    timestamp: number
  }

  export type TimestampUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    tree?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
  }

  export type TimestampUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    tree?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
  }

  export type TimestampCreateManyInput = {
    id: string
    from: string
    txid: string
    tree?: string
    timestamp: number
  }

  export type TimestampUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    tree?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
  }

  export type TimestampUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    tree?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
  }

  export type OffchainRevocationCreateInput = {
    id?: string
    from: string
    uid: string
    txid: string
    timestamp: number
  }

  export type OffchainRevocationUncheckedCreateInput = {
    id?: string
    from: string
    uid: string
    txid: string
    timestamp: number
  }

  export type OffchainRevocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
  }

  export type OffchainRevocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
  }

  export type OffchainRevocationCreateManyInput = {
    id?: string
    from: string
    uid: string
    txid: string
    timestamp: number
  }

  export type OffchainRevocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
  }

  export type OffchainRevocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
  }

  export type EnsNameCreateInput = {
    id: string
    name: string
    timestamp: number
  }

  export type EnsNameUncheckedCreateInput = {
    id: string
    name: string
    timestamp: number
  }

  export type EnsNameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
  }

  export type EnsNameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
  }

  export type EnsNameCreateManyInput = {
    id: string
    name: string
    timestamp: number
  }

  export type EnsNameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
  }

  export type EnsNameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
  }

  export type ServiceStatCreateInput = {
    name: string
    value: string
  }

  export type ServiceStatUncheckedCreateInput = {
    name: string
    value: string
  }

  export type ServiceStatUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceStatUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceStatCreateManyInput = {
    name: string
    value: string
  }

  export type ServiceStatUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceStatUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type AttestationListRelationFilter = {
    every?: AttestationWhereInput
    some?: AttestationWhereInput
    none?: AttestationWhereInput
  }

  export type SchemaNameListRelationFilter = {
    every?: SchemaNameWhereInput
    some?: SchemaNameWhereInput
    none?: SchemaNameWhereInput
  }

  export type AttestationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchemaNameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchemaCountOrderByAggregateInput = {
    id?: SortOrder
    schema?: SortOrder
    creator?: SortOrder
    resolver?: SortOrder
    revocable?: SortOrder
    index?: SortOrder
    txid?: SortOrder
    time?: SortOrder
  }

  export type SchemaAvgOrderByAggregateInput = {
    time?: SortOrder
  }

  export type SchemaMaxOrderByAggregateInput = {
    id?: SortOrder
    schema?: SortOrder
    creator?: SortOrder
    resolver?: SortOrder
    revocable?: SortOrder
    index?: SortOrder
    txid?: SortOrder
    time?: SortOrder
  }

  export type SchemaMinOrderByAggregateInput = {
    id?: SortOrder
    schema?: SortOrder
    creator?: SortOrder
    resolver?: SortOrder
    revocable?: SortOrder
    index?: SortOrder
    txid?: SortOrder
    time?: SortOrder
  }

  export type SchemaSumOrderByAggregateInput = {
    time?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type SchemaRelationFilter = {
    is?: SchemaWhereInput
    isNot?: SchemaWhereInput
  }

  export type AttestationCountOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    decodedDataJson?: SortOrder
    recipient?: SortOrder
    attester?: SortOrder
    time?: SortOrder
    timeCreated?: SortOrder
    expirationTime?: SortOrder
    revocationTime?: SortOrder
    refUID?: SortOrder
    revocable?: SortOrder
    revoked?: SortOrder
    txid?: SortOrder
    schemaId?: SortOrder
    ipfsHash?: SortOrder
    isOffchain?: SortOrder
  }

  export type AttestationAvgOrderByAggregateInput = {
    time?: SortOrder
    timeCreated?: SortOrder
    expirationTime?: SortOrder
    revocationTime?: SortOrder
  }

  export type AttestationMaxOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    decodedDataJson?: SortOrder
    recipient?: SortOrder
    attester?: SortOrder
    time?: SortOrder
    timeCreated?: SortOrder
    expirationTime?: SortOrder
    revocationTime?: SortOrder
    refUID?: SortOrder
    revocable?: SortOrder
    revoked?: SortOrder
    txid?: SortOrder
    schemaId?: SortOrder
    ipfsHash?: SortOrder
    isOffchain?: SortOrder
  }

  export type AttestationMinOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    decodedDataJson?: SortOrder
    recipient?: SortOrder
    attester?: SortOrder
    time?: SortOrder
    timeCreated?: SortOrder
    expirationTime?: SortOrder
    revocationTime?: SortOrder
    refUID?: SortOrder
    revocable?: SortOrder
    revoked?: SortOrder
    txid?: SortOrder
    schemaId?: SortOrder
    ipfsHash?: SortOrder
    isOffchain?: SortOrder
  }

  export type AttestationSumOrderByAggregateInput = {
    time?: SortOrder
    timeCreated?: SortOrder
    expirationTime?: SortOrder
    revocationTime?: SortOrder
  }

  export type SchemaNameCountOrderByAggregateInput = {
    id?: SortOrder
    schemaId?: SortOrder
    attesterAddress?: SortOrder
    name?: SortOrder
    time?: SortOrder
    isCreator?: SortOrder
  }

  export type SchemaNameAvgOrderByAggregateInput = {
    time?: SortOrder
  }

  export type SchemaNameMaxOrderByAggregateInput = {
    id?: SortOrder
    schemaId?: SortOrder
    attesterAddress?: SortOrder
    name?: SortOrder
    time?: SortOrder
    isCreator?: SortOrder
  }

  export type SchemaNameMinOrderByAggregateInput = {
    id?: SortOrder
    schemaId?: SortOrder
    attesterAddress?: SortOrder
    name?: SortOrder
    time?: SortOrder
    isCreator?: SortOrder
  }

  export type SchemaNameSumOrderByAggregateInput = {
    time?: SortOrder
  }

  export type TimestampCountOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    txid?: SortOrder
    tree?: SortOrder
    timestamp?: SortOrder
  }

  export type TimestampAvgOrderByAggregateInput = {
    timestamp?: SortOrder
  }

  export type TimestampMaxOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    txid?: SortOrder
    tree?: SortOrder
    timestamp?: SortOrder
  }

  export type TimestampMinOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    txid?: SortOrder
    tree?: SortOrder
    timestamp?: SortOrder
  }

  export type TimestampSumOrderByAggregateInput = {
    timestamp?: SortOrder
  }

  export type OffchainRevocationCountOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    uid?: SortOrder
    txid?: SortOrder
    timestamp?: SortOrder
  }

  export type OffchainRevocationAvgOrderByAggregateInput = {
    timestamp?: SortOrder
  }

  export type OffchainRevocationMaxOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    uid?: SortOrder
    txid?: SortOrder
    timestamp?: SortOrder
  }

  export type OffchainRevocationMinOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    uid?: SortOrder
    txid?: SortOrder
    timestamp?: SortOrder
  }

  export type OffchainRevocationSumOrderByAggregateInput = {
    timestamp?: SortOrder
  }

  export type EnsNameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    timestamp?: SortOrder
  }

  export type EnsNameAvgOrderByAggregateInput = {
    timestamp?: SortOrder
  }

  export type EnsNameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    timestamp?: SortOrder
  }

  export type EnsNameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    timestamp?: SortOrder
  }

  export type EnsNameSumOrderByAggregateInput = {
    timestamp?: SortOrder
  }

  export type ServiceStatCountOrderByAggregateInput = {
    name?: SortOrder
    value?: SortOrder
  }

  export type ServiceStatMaxOrderByAggregateInput = {
    name?: SortOrder
    value?: SortOrder
  }

  export type ServiceStatMinOrderByAggregateInput = {
    name?: SortOrder
    value?: SortOrder
  }

  export type AttestationCreateNestedManyWithoutSchemaInput = {
    create?: XOR<Enumerable<AttestationCreateWithoutSchemaInput>, Enumerable<AttestationUncheckedCreateWithoutSchemaInput>>
    connectOrCreate?: Enumerable<AttestationCreateOrConnectWithoutSchemaInput>
    createMany?: AttestationCreateManySchemaInputEnvelope
    connect?: Enumerable<AttestationWhereUniqueInput>
  }

  export type SchemaNameCreateNestedManyWithoutSchemaInput = {
    create?: XOR<Enumerable<SchemaNameCreateWithoutSchemaInput>, Enumerable<SchemaNameUncheckedCreateWithoutSchemaInput>>
    connectOrCreate?: Enumerable<SchemaNameCreateOrConnectWithoutSchemaInput>
    createMany?: SchemaNameCreateManySchemaInputEnvelope
    connect?: Enumerable<SchemaNameWhereUniqueInput>
  }

  export type AttestationUncheckedCreateNestedManyWithoutSchemaInput = {
    create?: XOR<Enumerable<AttestationCreateWithoutSchemaInput>, Enumerable<AttestationUncheckedCreateWithoutSchemaInput>>
    connectOrCreate?: Enumerable<AttestationCreateOrConnectWithoutSchemaInput>
    createMany?: AttestationCreateManySchemaInputEnvelope
    connect?: Enumerable<AttestationWhereUniqueInput>
  }

  export type SchemaNameUncheckedCreateNestedManyWithoutSchemaInput = {
    create?: XOR<Enumerable<SchemaNameCreateWithoutSchemaInput>, Enumerable<SchemaNameUncheckedCreateWithoutSchemaInput>>
    connectOrCreate?: Enumerable<SchemaNameCreateOrConnectWithoutSchemaInput>
    createMany?: SchemaNameCreateManySchemaInputEnvelope
    connect?: Enumerable<SchemaNameWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AttestationUpdateManyWithoutSchemaNestedInput = {
    create?: XOR<Enumerable<AttestationCreateWithoutSchemaInput>, Enumerable<AttestationUncheckedCreateWithoutSchemaInput>>
    connectOrCreate?: Enumerable<AttestationCreateOrConnectWithoutSchemaInput>
    upsert?: Enumerable<AttestationUpsertWithWhereUniqueWithoutSchemaInput>
    createMany?: AttestationCreateManySchemaInputEnvelope
    set?: Enumerable<AttestationWhereUniqueInput>
    disconnect?: Enumerable<AttestationWhereUniqueInput>
    delete?: Enumerable<AttestationWhereUniqueInput>
    connect?: Enumerable<AttestationWhereUniqueInput>
    update?: Enumerable<AttestationUpdateWithWhereUniqueWithoutSchemaInput>
    updateMany?: Enumerable<AttestationUpdateManyWithWhereWithoutSchemaInput>
    deleteMany?: Enumerable<AttestationScalarWhereInput>
  }

  export type SchemaNameUpdateManyWithoutSchemaNestedInput = {
    create?: XOR<Enumerable<SchemaNameCreateWithoutSchemaInput>, Enumerable<SchemaNameUncheckedCreateWithoutSchemaInput>>
    connectOrCreate?: Enumerable<SchemaNameCreateOrConnectWithoutSchemaInput>
    upsert?: Enumerable<SchemaNameUpsertWithWhereUniqueWithoutSchemaInput>
    createMany?: SchemaNameCreateManySchemaInputEnvelope
    set?: Enumerable<SchemaNameWhereUniqueInput>
    disconnect?: Enumerable<SchemaNameWhereUniqueInput>
    delete?: Enumerable<SchemaNameWhereUniqueInput>
    connect?: Enumerable<SchemaNameWhereUniqueInput>
    update?: Enumerable<SchemaNameUpdateWithWhereUniqueWithoutSchemaInput>
    updateMany?: Enumerable<SchemaNameUpdateManyWithWhereWithoutSchemaInput>
    deleteMany?: Enumerable<SchemaNameScalarWhereInput>
  }

  export type AttestationUncheckedUpdateManyWithoutSchemaNestedInput = {
    create?: XOR<Enumerable<AttestationCreateWithoutSchemaInput>, Enumerable<AttestationUncheckedCreateWithoutSchemaInput>>
    connectOrCreate?: Enumerable<AttestationCreateOrConnectWithoutSchemaInput>
    upsert?: Enumerable<AttestationUpsertWithWhereUniqueWithoutSchemaInput>
    createMany?: AttestationCreateManySchemaInputEnvelope
    set?: Enumerable<AttestationWhereUniqueInput>
    disconnect?: Enumerable<AttestationWhereUniqueInput>
    delete?: Enumerable<AttestationWhereUniqueInput>
    connect?: Enumerable<AttestationWhereUniqueInput>
    update?: Enumerable<AttestationUpdateWithWhereUniqueWithoutSchemaInput>
    updateMany?: Enumerable<AttestationUpdateManyWithWhereWithoutSchemaInput>
    deleteMany?: Enumerable<AttestationScalarWhereInput>
  }

  export type SchemaNameUncheckedUpdateManyWithoutSchemaNestedInput = {
    create?: XOR<Enumerable<SchemaNameCreateWithoutSchemaInput>, Enumerable<SchemaNameUncheckedCreateWithoutSchemaInput>>
    connectOrCreate?: Enumerable<SchemaNameCreateOrConnectWithoutSchemaInput>
    upsert?: Enumerable<SchemaNameUpsertWithWhereUniqueWithoutSchemaInput>
    createMany?: SchemaNameCreateManySchemaInputEnvelope
    set?: Enumerable<SchemaNameWhereUniqueInput>
    disconnect?: Enumerable<SchemaNameWhereUniqueInput>
    delete?: Enumerable<SchemaNameWhereUniqueInput>
    connect?: Enumerable<SchemaNameWhereUniqueInput>
    update?: Enumerable<SchemaNameUpdateWithWhereUniqueWithoutSchemaInput>
    updateMany?: Enumerable<SchemaNameUpdateManyWithWhereWithoutSchemaInput>
    deleteMany?: Enumerable<SchemaNameScalarWhereInput>
  }

  export type SchemaCreateNestedOneWithoutAttestationsInput = {
    create?: XOR<SchemaCreateWithoutAttestationsInput, SchemaUncheckedCreateWithoutAttestationsInput>
    connectOrCreate?: SchemaCreateOrConnectWithoutAttestationsInput
    connect?: SchemaWhereUniqueInput
  }

  export type SchemaUpdateOneRequiredWithoutAttestationsNestedInput = {
    create?: XOR<SchemaCreateWithoutAttestationsInput, SchemaUncheckedCreateWithoutAttestationsInput>
    connectOrCreate?: SchemaCreateOrConnectWithoutAttestationsInput
    upsert?: SchemaUpsertWithoutAttestationsInput
    connect?: SchemaWhereUniqueInput
    update?: XOR<SchemaUpdateWithoutAttestationsInput, SchemaUncheckedUpdateWithoutAttestationsInput>
  }

  export type SchemaCreateNestedOneWithoutSchemaNamesInput = {
    create?: XOR<SchemaCreateWithoutSchemaNamesInput, SchemaUncheckedCreateWithoutSchemaNamesInput>
    connectOrCreate?: SchemaCreateOrConnectWithoutSchemaNamesInput
    connect?: SchemaWhereUniqueInput
  }

  export type SchemaUpdateOneRequiredWithoutSchemaNamesNestedInput = {
    create?: XOR<SchemaCreateWithoutSchemaNamesInput, SchemaUncheckedCreateWithoutSchemaNamesInput>
    connectOrCreate?: SchemaCreateOrConnectWithoutSchemaNamesInput
    upsert?: SchemaUpsertWithoutSchemaNamesInput
    connect?: SchemaWhereUniqueInput
    update?: XOR<SchemaUpdateWithoutSchemaNamesInput, SchemaUncheckedUpdateWithoutSchemaNamesInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type AttestationCreateWithoutSchemaInput = {
    id: string
    data: string
    decodedDataJson?: string
    recipient: string
    attester: string
    time: number
    timeCreated: number
    expirationTime: number
    revocationTime: number
    refUID: string
    revocable: boolean
    revoked: boolean
    txid: string
    ipfsHash: string
    isOffchain: boolean
  }

  export type AttestationUncheckedCreateWithoutSchemaInput = {
    id: string
    data: string
    decodedDataJson?: string
    recipient: string
    attester: string
    time: number
    timeCreated: number
    expirationTime: number
    revocationTime: number
    refUID: string
    revocable: boolean
    revoked: boolean
    txid: string
    ipfsHash: string
    isOffchain: boolean
  }

  export type AttestationCreateOrConnectWithoutSchemaInput = {
    where: AttestationWhereUniqueInput
    create: XOR<AttestationCreateWithoutSchemaInput, AttestationUncheckedCreateWithoutSchemaInput>
  }

  export type AttestationCreateManySchemaInputEnvelope = {
    data: Enumerable<AttestationCreateManySchemaInput>
    skipDuplicates?: boolean
  }

  export type SchemaNameCreateWithoutSchemaInput = {
    id?: string
    attesterAddress: string
    name: string
    time: number
    isCreator: boolean
  }

  export type SchemaNameUncheckedCreateWithoutSchemaInput = {
    id?: string
    attesterAddress: string
    name: string
    time: number
    isCreator: boolean
  }

  export type SchemaNameCreateOrConnectWithoutSchemaInput = {
    where: SchemaNameWhereUniqueInput
    create: XOR<SchemaNameCreateWithoutSchemaInput, SchemaNameUncheckedCreateWithoutSchemaInput>
  }

  export type SchemaNameCreateManySchemaInputEnvelope = {
    data: Enumerable<SchemaNameCreateManySchemaInput>
    skipDuplicates?: boolean
  }

  export type AttestationUpsertWithWhereUniqueWithoutSchemaInput = {
    where: AttestationWhereUniqueInput
    update: XOR<AttestationUpdateWithoutSchemaInput, AttestationUncheckedUpdateWithoutSchemaInput>
    create: XOR<AttestationCreateWithoutSchemaInput, AttestationUncheckedCreateWithoutSchemaInput>
  }

  export type AttestationUpdateWithWhereUniqueWithoutSchemaInput = {
    where: AttestationWhereUniqueInput
    data: XOR<AttestationUpdateWithoutSchemaInput, AttestationUncheckedUpdateWithoutSchemaInput>
  }

  export type AttestationUpdateManyWithWhereWithoutSchemaInput = {
    where: AttestationScalarWhereInput
    data: XOR<AttestationUpdateManyMutationInput, AttestationUncheckedUpdateManyWithoutAttestationsInput>
  }

  export type AttestationScalarWhereInput = {
    AND?: Enumerable<AttestationScalarWhereInput>
    OR?: Enumerable<AttestationScalarWhereInput>
    NOT?: Enumerable<AttestationScalarWhereInput>
    id?: StringFilter | string
    data?: StringFilter | string
    decodedDataJson?: StringFilter | string
    recipient?: StringFilter | string
    attester?: StringFilter | string
    time?: IntFilter | number
    timeCreated?: IntFilter | number
    expirationTime?: IntFilter | number
    revocationTime?: IntFilter | number
    refUID?: StringFilter | string
    revocable?: BoolFilter | boolean
    revoked?: BoolFilter | boolean
    txid?: StringFilter | string
    schemaId?: StringFilter | string
    ipfsHash?: StringFilter | string
    isOffchain?: BoolFilter | boolean
  }

  export type SchemaNameUpsertWithWhereUniqueWithoutSchemaInput = {
    where: SchemaNameWhereUniqueInput
    update: XOR<SchemaNameUpdateWithoutSchemaInput, SchemaNameUncheckedUpdateWithoutSchemaInput>
    create: XOR<SchemaNameCreateWithoutSchemaInput, SchemaNameUncheckedCreateWithoutSchemaInput>
  }

  export type SchemaNameUpdateWithWhereUniqueWithoutSchemaInput = {
    where: SchemaNameWhereUniqueInput
    data: XOR<SchemaNameUpdateWithoutSchemaInput, SchemaNameUncheckedUpdateWithoutSchemaInput>
  }

  export type SchemaNameUpdateManyWithWhereWithoutSchemaInput = {
    where: SchemaNameScalarWhereInput
    data: XOR<SchemaNameUpdateManyMutationInput, SchemaNameUncheckedUpdateManyWithoutSchemaNamesInput>
  }

  export type SchemaNameScalarWhereInput = {
    AND?: Enumerable<SchemaNameScalarWhereInput>
    OR?: Enumerable<SchemaNameScalarWhereInput>
    NOT?: Enumerable<SchemaNameScalarWhereInput>
    id?: StringFilter | string
    schemaId?: StringFilter | string
    attesterAddress?: StringFilter | string
    name?: StringFilter | string
    time?: IntFilter | number
    isCreator?: BoolFilter | boolean
  }

  export type SchemaCreateWithoutAttestationsInput = {
    id: string
    schema: string
    creator: string
    resolver: string
    revocable: boolean
    index: string
    txid: string
    time: number
    schemaNames?: SchemaNameCreateNestedManyWithoutSchemaInput
  }

  export type SchemaUncheckedCreateWithoutAttestationsInput = {
    id: string
    schema: string
    creator: string
    resolver: string
    revocable: boolean
    index: string
    txid: string
    time: number
    schemaNames?: SchemaNameUncheckedCreateNestedManyWithoutSchemaInput
  }

  export type SchemaCreateOrConnectWithoutAttestationsInput = {
    where: SchemaWhereUniqueInput
    create: XOR<SchemaCreateWithoutAttestationsInput, SchemaUncheckedCreateWithoutAttestationsInput>
  }

  export type SchemaUpsertWithoutAttestationsInput = {
    update: XOR<SchemaUpdateWithoutAttestationsInput, SchemaUncheckedUpdateWithoutAttestationsInput>
    create: XOR<SchemaCreateWithoutAttestationsInput, SchemaUncheckedCreateWithoutAttestationsInput>
  }

  export type SchemaUpdateWithoutAttestationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    schema?: StringFieldUpdateOperationsInput | string
    creator?: StringFieldUpdateOperationsInput | string
    resolver?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    index?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    schemaNames?: SchemaNameUpdateManyWithoutSchemaNestedInput
  }

  export type SchemaUncheckedUpdateWithoutAttestationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    schema?: StringFieldUpdateOperationsInput | string
    creator?: StringFieldUpdateOperationsInput | string
    resolver?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    index?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    schemaNames?: SchemaNameUncheckedUpdateManyWithoutSchemaNestedInput
  }

  export type SchemaCreateWithoutSchemaNamesInput = {
    id: string
    schema: string
    creator: string
    resolver: string
    revocable: boolean
    index: string
    txid: string
    time: number
    attestations?: AttestationCreateNestedManyWithoutSchemaInput
  }

  export type SchemaUncheckedCreateWithoutSchemaNamesInput = {
    id: string
    schema: string
    creator: string
    resolver: string
    revocable: boolean
    index: string
    txid: string
    time: number
    attestations?: AttestationUncheckedCreateNestedManyWithoutSchemaInput
  }

  export type SchemaCreateOrConnectWithoutSchemaNamesInput = {
    where: SchemaWhereUniqueInput
    create: XOR<SchemaCreateWithoutSchemaNamesInput, SchemaUncheckedCreateWithoutSchemaNamesInput>
  }

  export type SchemaUpsertWithoutSchemaNamesInput = {
    update: XOR<SchemaUpdateWithoutSchemaNamesInput, SchemaUncheckedUpdateWithoutSchemaNamesInput>
    create: XOR<SchemaCreateWithoutSchemaNamesInput, SchemaUncheckedCreateWithoutSchemaNamesInput>
  }

  export type SchemaUpdateWithoutSchemaNamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    schema?: StringFieldUpdateOperationsInput | string
    creator?: StringFieldUpdateOperationsInput | string
    resolver?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    index?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    attestations?: AttestationUpdateManyWithoutSchemaNestedInput
  }

  export type SchemaUncheckedUpdateWithoutSchemaNamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    schema?: StringFieldUpdateOperationsInput | string
    creator?: StringFieldUpdateOperationsInput | string
    resolver?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    index?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    attestations?: AttestationUncheckedUpdateManyWithoutSchemaNestedInput
  }

  export type AttestationCreateManySchemaInput = {
    id: string
    data: string
    decodedDataJson?: string
    recipient: string
    attester: string
    time: number
    timeCreated: number
    expirationTime: number
    revocationTime: number
    refUID: string
    revocable: boolean
    revoked: boolean
    txid: string
    ipfsHash: string
    isOffchain: boolean
  }

  export type SchemaNameCreateManySchemaInput = {
    id?: string
    attesterAddress: string
    name: string
    time: number
    isCreator: boolean
  }

  export type AttestationUpdateWithoutSchemaInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    decodedDataJson?: StringFieldUpdateOperationsInput | string
    recipient?: StringFieldUpdateOperationsInput | string
    attester?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    timeCreated?: IntFieldUpdateOperationsInput | number
    expirationTime?: IntFieldUpdateOperationsInput | number
    revocationTime?: IntFieldUpdateOperationsInput | number
    refUID?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    revoked?: BoolFieldUpdateOperationsInput | boolean
    txid?: StringFieldUpdateOperationsInput | string
    ipfsHash?: StringFieldUpdateOperationsInput | string
    isOffchain?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttestationUncheckedUpdateWithoutSchemaInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    decodedDataJson?: StringFieldUpdateOperationsInput | string
    recipient?: StringFieldUpdateOperationsInput | string
    attester?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    timeCreated?: IntFieldUpdateOperationsInput | number
    expirationTime?: IntFieldUpdateOperationsInput | number
    revocationTime?: IntFieldUpdateOperationsInput | number
    refUID?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    revoked?: BoolFieldUpdateOperationsInput | boolean
    txid?: StringFieldUpdateOperationsInput | string
    ipfsHash?: StringFieldUpdateOperationsInput | string
    isOffchain?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttestationUncheckedUpdateManyWithoutAttestationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    decodedDataJson?: StringFieldUpdateOperationsInput | string
    recipient?: StringFieldUpdateOperationsInput | string
    attester?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    timeCreated?: IntFieldUpdateOperationsInput | number
    expirationTime?: IntFieldUpdateOperationsInput | number
    revocationTime?: IntFieldUpdateOperationsInput | number
    refUID?: StringFieldUpdateOperationsInput | string
    revocable?: BoolFieldUpdateOperationsInput | boolean
    revoked?: BoolFieldUpdateOperationsInput | boolean
    txid?: StringFieldUpdateOperationsInput | string
    ipfsHash?: StringFieldUpdateOperationsInput | string
    isOffchain?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SchemaNameUpdateWithoutSchemaInput = {
    id?: StringFieldUpdateOperationsInput | string
    attesterAddress?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    isCreator?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SchemaNameUncheckedUpdateWithoutSchemaInput = {
    id?: StringFieldUpdateOperationsInput | string
    attesterAddress?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    isCreator?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SchemaNameUncheckedUpdateManyWithoutSchemaNamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    attesterAddress?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    isCreator?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}